#!/usr/bin/env python3
"""Generate Markdown visualization of label mappings with usage counts."""

import json
import subprocess
from label_mapping import LABEL_MAPPING, NEW_LABELS, Label


def run_gh(args):
    """Run gh CLI command."""
    result = subprocess.run(
        ["gh"] + args, capture_output=True, text=True, check=True  # noqa: S603
    )
    return json.loads(result.stdout) if result.stdout.strip() else []


def get_label_usage(repo: str, label_name: str) -> tuple[int, int]:
    """Get issue and PR count for a label."""
    issues = run_gh([
        "issue", "list",
        "--repo", repo,
        "--label", label_name,
        "--limit", "1000",
        "--state", "all",
        "--json", "number"
    ])
    prs = run_gh([
        "pr", "list",
        "--repo", repo,
        "--label", label_name,
        "--limit", "1000",
        "--state", "all",
        "--json", "number"
    ])
    return len(issues), len(prs)


def generate_markdown():
    """Generate Markdown visualization."""
    repo = "ethereum/execution-spec-tests"

    print("Fetching label usage data...")

    md = """# Label Migration Mapping

This document shows the mapping from old labels to new labels for `ethereum/execution-spec-tests`.

## Summary

Following [Rust project label conventions](https://forge.rust-lang.org/release/issue-triaging.html):
- Labels grouped by prefix with consistent colors
- At most one label from each group per issue/PR (flexible for multi-area issues)

## Label Groups

| Prefix | Color | Purpose |
|--------|-------|---------|
| `A-*` | ![#FBCA04](https://via.placeholder.com/15/FBCA04/000000?text=+) `#FBCA04` Yellow | Area labels (packages, features) |
| `C-*` | ![#C5DEF5](https://via.placeholder.com/15/C5DEF5/000000?text=+) `#C5DEF5` Light Blue | Category (bug, enhancement, etc.) |
| `E-*` | ![#02E10C](https://via.placeholder.com/15/02E10C/000000?text=+) `#02E10C` Green | Experience/Difficulty (from Rust) |
| `F-*` | ![#D4C5F9](https://via.placeholder.com/15/D4C5F9/000000?text=+) `#D4C5F9` Purple | Ethereum Forks |
| `P-*` | ![#E99695](https://via.placeholder.com/15/E99695/000000?text=+) `#E99695` Pink | Priority |
| `S-*` | ![#D4C5F9](https://via.placeholder.com/15/D4C5F9/000000?text=+) `#D4C5F9` Purple | Status |

## Mappings

| Old Label | → | New Label | Usage (Issues/PRs) |
|-----------|---|-----------|-------------------|
"""

    # Collect all mappings with usage data
    mappings = []

    for old_name, mapping in LABEL_MAPPING.items():
        print(f"Processing: {old_name}")

        if mapping == "KEEP":
            continue

        issue_count, pr_count = get_label_usage(repo, old_name)
        total = issue_count + pr_count

        if isinstance(mapping, Label):
            mappings.append({
                "old_name": old_name,
                "new_name": mapping.name,
                "issues": issue_count,
                "prs": pr_count,
                "total": total,
                "action": "map"
            })
        elif mapping is None:
            mappings.append({
                "old_name": old_name,
                "new_name": "~~DELETE~~",
                "issues": issue_count,
                "prs": pr_count,
                "total": total,
                "action": "delete"
            })

    # Sort by total usage (descending)
    mappings.sort(key=lambda x: x["total"], reverse=True)

    # Add rows
    for m in mappings:
        md += f"| `{m['old_name']}` | → | `{m['new_name']}` | {m['issues']} issues, {m['prs']} PRs |\n"

    # Add new labels section
    md += """
## New Labels (No Old Label Mapping)

| Label | Description |
|-------|-------------|
"""

    for label in sorted(NEW_LABELS, key=lambda x: x.name):
        md += f"| `{label.name}` | {label.description} |\n"

    md += """
## Labels Kept As-Is

These labels remain unchanged:

"""

    for old_name, mapping in sorted(LABEL_MAPPING.items()):
        if mapping == "KEEP":
            md += f"- `{old_name}`\n"

    md += """
---

*Generated by `scripts/generate_mapping_md.py`*
"""

    with open("mapping.md", "w") as f:
        f.write(md)

    print("\n✅ Generated mapping.md")


if __name__ == "__main__":
    generate_markdown()
