system_contract = EIP does not introduce a new system contract
precompile = EIP does not introduce a new precompile
removed_precompile = EIP does not remove a precompile
transaction_type = EIP does not introduce a new transaction type
block_header_field = EIP does not add any new block header fields
block_body_field = EIP does not add any new block body fields
gas_cost_changes = EIP does not modify existing gas costs, only introduces new opcode with fixed cost
gas_refunds_changes = EIP does not introduce any gas refund changes
blob_count_changes = EIP does not introduce any blob count changes
execution_layer_request = EIP does not introduce an execution layer request
new_transaction_validity_constraint = EIP does not introduce a new transaction validity constraint
modified_transaction_validity_constraint = EIP does not introduce a modified transaction validity constraint
opcode/test/mem_exp = CLZ does not read/write to memory component
opcode/test/stack_overflow = CLZ takes one args and pushes one args to stack, not increasing stack element, hence no overflow issue
opcode/test/stack_complex_operations/data_portion_variables = there is no data portion for CLZ
opcode/test/execution_context/staticcall/ban_check = CLZ does not modify state, so no ban check needed
opcode/test/execution_context/staticcall/ban_no_modification = CLZ does not modify state, so no ban check needed
opcode/test/execution_context/staticcall/sub_calls = CLZ does not modify state, so no ban check needed
opcode/test/execution_context/delegatecall/storage = CLZ does not modify storage
opcode/test/execution_context/delegatecall/balance = CLZ does not modify balance
opcode/test/execution_context/delegatecall/code = CLZ does not modify code
opcode/test/execution_context/tx_context = CLZ does not change behavior depending on transaction property
opcode/test/execution_context/block_context = CLZ does not change behavior depending on block property
opcode/test/gas_usage/memory_expansion = no memory read/write for CLZ
opcode/test/gas_usage/out_of_gas_memory = no memory read/write for CLZ
opcode/test/gas_usage/order_of_operations = the order will not affect result of CLZ
opcode/test/return_data = although we could verify the return buffer is not affected, but it is more like testing memory write operation, as CLZ does not write to memory directly
opcode/test/terminating = not such opcode
opcode/test/terminating/rollback = CLZ is not a terminating opcode, so no rollback behavior
opcode/test/out_of_bounds = takes one element from stack, no specific boundary
opcode/test/exceptional_abort = underflow is the only exceptional abort scenario and it is included already
opcode/test/data_portion = no data portion
opcode/test/contract_creation = no contract created in execution