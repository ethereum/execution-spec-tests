{
    // Settings that users SHOULD adhere to when developing with the EEST repo.
    "cSpell.customDictionaries": {
        "project-words": {
            "name": "project-words",
            "path": "${workspaceRoot}/whitelist.txt",
            "description": "Words used in this project",
            "addWords": true
        },
        "custom": true,
        "internal-terms": false
    },
    "[json]": {
        "editor.defaultFormatter": "esbenp.prettier-vscode"
    },
    "[python]": {
        "editor.rulers": [100],
        "editor.formatOnSave": true,
        "editor.defaultFormatter": "charliermarsh.ruff",
        "editor.codeActionsOnSave": {
            "source.organizeImports": "explicit"
        },
    },
    "python.analysis.autoFormatStrings": true,
    "python.testing.unittestEnabled": false,
    "python.testing.pytestEnabled": true,
    "python.testing.pytestArgs": [
        // The main cli tools (`fill`, `consume`, `execute`) in execution-spec-tests are based
        // on pytest (a very popular Python unit testing framework). As such, EEST test cases for
        // these tools can be explored, executed (and debugged!) via VS Code's "Testing" view 
        // https://code.visualstudio.com/docs/editor/testing (just as for unit tests).
        // 
        // vscode-python only supports single framework environments, here is the issue to track
        // multiple environments support:
        // https://github.com/microsoft/vscode-python/issues/12075
        //
        // For now, to switch between running the EEST "framework" tests (the actual unit tests 
        // for EEST libraries and tools) and running the EEST's EL test cases via `fill`,
        // `consume` and `execute`, specify the appropriate pytest*.ini file below and add
        // command-line options as needed.
        //
        // * Framework tests:
        // "-c", "pytest-framework.ini",
        // 
        // * Fill, see the output of:
        //   `fill --help` for eest specific options, or,
        //   `fill --pytest-help` for all pytest available options, or,
        //   https://eest.ethereum.org/main/filling_tests/filling_tests_command_line/
        "-c", "pytest.ini", "--fork=Prague",
        //
        // * Consume (works, but the output of VS Code's Testing View is broken due to nested
        // `[]` in the generated test IDs):
        // "-c", "pytest-consume.ini", "--input=fixtures/", "src/pytest_plugins/consume/direct/test_via_direct.py", "--evm-bin=~/bin/evm"
    ],
    "ruff.enable": true,
    "ruff.lineLength": 99,
    "extensions.ignoreRecommendations": false,
    "search.exclude": {
      "tests/legacy": true
    },
    "files.watcherExclude": {
      "tests/legacy": true
    }
}
