<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Filling_tests on EEST Docs</title>
    <link>http://localhost:1313/filling_tests/</link>
    <description>Recent content in Filling_tests on EEST Docs</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 09 Jul 2025 12:42:33 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/filling_tests/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Filling Tests</title>
      <link>http://localhost:1313/filling_tests/main/</link>
      <pubDate>Wed, 09 Jul 2025 12:42:33 +0000</pubDate>
      <guid>http://localhost:1313/filling_tests/main/</guid>
      <description>&lt;p&gt;Execution of test cases against clients is a two-step process:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;JSON test fixtures are generated from the Python test cases found in &lt;code&gt;./tests&lt;/code&gt; using &lt;code&gt;fill&lt;/code&gt; and an EVM transition tool (&lt;code&gt;t8n&lt;/code&gt;) implementation.&lt;/li&gt;&#xA;&lt;li&gt;Clients &amp;ldquo;consume&amp;rdquo; the JSON fixtures via either a dedicated, client-specific interface or a testing environment such as Hive.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;The process of generating fixtures is often referred to as &amp;ldquo;filling&amp;rdquo; the tests.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;callout callout-info&#34;&gt;&#xA;  &lt;div class=&#34;callout-title&#34;&gt;The &lt;code&gt;execute&lt;/code&gt; command&lt;/div&gt;&#xA;  &lt;div class=&#34;callout-content&#34;&gt;&#xA;    The &lt;code&gt;execute&lt;/code&gt; command directly executes Python test cases against a client via its RPC without using generated JSON fixtures. For all other methods of testing clients, the JSON fixtures are required. For more information, see &lt;a href=&#34;../running_tests/execute/main.md&#34;&gt;Executing Tests&lt;/a&gt;.&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;h2 id=&#34;transition-tools-t8n&#34;&gt;Transition Tools (&lt;code&gt;t8n&lt;/code&gt;)&lt;/h2&gt;&#xA;&lt;p&gt;The &lt;code&gt;fill&lt;/code&gt; command requires an EVM &lt;code&gt;t8n&lt;/code&gt; tool provided by most clients in order to generate the JSON fixtures. The &lt;code&gt;t8n&lt;/code&gt; tool is mainly responsible for calculating the post-state of the EVM after executing a transaction, most relevantly, it calculates the updated state root.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/filling_tests/debugging_t8n_tools/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/filling_tests/debugging_t8n_tools/</guid>
      <description>&lt;h1 id=&#34;debugging-transition-tools&#34;&gt;Debugging Transition Tools&lt;/h1&gt;&#xA;&lt;p&gt;There are two flags that can help debugging &lt;code&gt;t8n&lt;/code&gt; tools or the execution-spec-tests framework:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;code&gt;--evm-dump-dir&lt;/code&gt; (Default: &lt;repo&gt;/logs/evm): Write debug information from &lt;code&gt;t8n&lt;/code&gt; tool calls to the specified directory.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;--traces&lt;/code&gt;: Collect traces of the execution from the transition tool.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;--verify-fixtures&lt;/code&gt;: Run go-ethereum&amp;rsquo;s &lt;code&gt;evm blocktest&lt;/code&gt; command to verify the generated test fixtures.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;evm-dump-directory&#34;&gt;EVM Dump Directory&lt;/h2&gt;&#xA;&lt;p&gt;The &lt;code&gt;--evm-dump-dir&lt;/code&gt; flag tells the framework to write the inputs and outputs of every call made to the &lt;code&gt;t8n&lt;/code&gt; command to the specified output directory. The aim is to help debugging or simply understand how a test is interacting with the EVM. The default location is &lt;code&gt;logs/evm&lt;/code&gt; in the project root.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/filling_tests/filling_tests_command_line/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/filling_tests/filling_tests_command_line/</guid>
      <description>&lt;h1 id=&#34;filling-tests-at-a-prompt&#34;&gt;Filling Tests at a Prompt&lt;/h1&gt;&#xA;&lt;p&gt;The execution-spec-tests test framework uses the &lt;a href=&#34;https://docs.pytest.org/en/latest/&#34;&gt;pytest framework&lt;/a&gt; for test case collection and execution. The &lt;code&gt;fill&lt;/code&gt; command is essentially an alias for &lt;code&gt;pytest&lt;/code&gt;, which uses several &lt;a href=&#34;../library/pytest_plugins/main.md&#34;&gt;custom pytest plugins&lt;/a&gt; to run transition tools against test cases and generate JSON fixtures.&lt;/p&gt;&#xA;&lt;p&gt;!!! note &amp;ldquo;Options specific to execution-spec-tests&amp;rdquo;&#xA;The command-line options specific to filling tests can be listed via:&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;```console&#xA;uv run fill --help&#xA;```&#xA;&#xA;See [Custom `fill` Command-Line Options](#custom-fill-command-line-options) for all options.&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h2 id=&#34;collection---test-exploration&#34;&gt;Collection - Test Exploration&lt;/h2&gt;&#xA;&lt;p&gt;The test cases implemented in the &lt;code&gt;./tests&lt;/code&gt; sub-directory can be listed in the console using:&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/filling_tests/filling_tests_dev_fork/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/filling_tests/filling_tests_dev_fork/</guid>
      <description>&lt;h1 id=&#34;filling-tests-for-features-under-development&#34;&gt;Filling Tests for Features under Development&lt;/h1&gt;&#xA;&lt;h2 id=&#34;requirements&#34;&gt;Requirements&lt;/h2&gt;&#xA;&lt;p&gt;By default, execution-spec-tests only generates fixtures for forks that have been deployed to mainnet. In order to generate fixtures for evm features that are actively under development:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;A version of the &lt;code&gt;evm&lt;/code&gt; and &lt;code&gt;solc&lt;/code&gt; tools that implement the feature must be available (although, typically only a developer version of the &lt;code&gt;evm&lt;/code&gt; tool is required, usually the latest stable release of &lt;code&gt;solc&lt;/code&gt; is adequate), and,&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/filling_tests/filling_tests_vs_code/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/filling_tests/filling_tests_vs_code/</guid>
      <description>&lt;h1 id=&#34;filling-tests-in-vs-code&#34;&gt;Filling Tests in VS Code&lt;/h1&gt;&#xA;&lt;p&gt;Prerequisite: &lt;a href=&#34;../getting_started/setup_vs_code.md&#34;&gt;VS Code Setup&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;exploring-test-cases&#34;&gt;Exploring Test Cases&lt;/h2&gt;&#xA;&lt;p&gt;Implemented test cases can be explored in VS Code&amp;rsquo;s &amp;ldquo;Testing&amp;rdquo; View; click on the conical flask highlighted in the screenshot below.&lt;/p&gt;&#xA;&lt;figure markdown&gt;  &lt;!-- markdownlint-disable MD033 (MD033=no-inline-html) --&gt;&#xA; ![VS Code Testing Tab](./img/vs_code_exploring_tests.png){ width=auto align=center}&#xA;&lt;/figure&gt;&#xA;&lt;p&gt;!!! note &amp;ldquo;Testing EVM Features Under Active Development&amp;rdquo;&#xA;See &lt;a href=&#34;./filling_tests_dev_fork.md#vs-code-setup&#34;&gt;the VS Code section&lt;/a&gt; in &lt;a href=&#34;./filling_tests_dev_fork.md&#34;&gt;Filling Tests for Features under Development&lt;/a&gt; to explore tests targeting EVM features under development.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/filling_tests/getting_started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/filling_tests/getting_started/</guid>
      <description>&lt;h1 id=&#34;getting-started-filling-tests&#34;&gt;Getting Started: Filling Tests&lt;/h1&gt;&#xA;&lt;p&gt;This guide describes how to get started with &lt;code&gt;fill&lt;/code&gt; and commonly-used command-line options.&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Explore test cases via &lt;code&gt;--collect-only&lt;/code&gt; and search for test cases that combine &lt;code&gt;PUSH0&lt;/code&gt; and &lt;code&gt;DELEGATECALL&lt;/code&gt; in the EVM functionality introduced in the Shanghai hard fork:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uv run fill --collect-only -k &amp;#34;push0 and delegatecall&amp;#34; tests/shanghai/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;fill&lt;/code&gt; command is based on &lt;a href=&#34;https://docs.pytest.org/en/stable/&#34;&gt;&lt;code&gt;pytest&lt;/code&gt;&lt;/a&gt;. The above command uses the &lt;a href=&#34;https://docs.pytest.org/en/stable/how-to/usage.html&#34;&gt;optional pytest arguments&lt;/a&gt;:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;--collect-only&lt;/code&gt; only collect test cases; don&amp;rsquo;t execute them.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;-k &amp;lt;expression&amp;gt;&lt;/code&gt; filter test cases by their test case ID based on the given expression.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;tests/shanghai&lt;/code&gt; the directory containing the test cases (tells &lt;code&gt;fill&lt;/code&gt; to only discover test cases in this directory; default: &lt;code&gt;tests/&lt;/code&gt;).&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Expected console output:&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/filling_tests/test_ids/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/filling_tests/test_ids/</guid>
      <description>&lt;h1 id=&#34;an-explanation-of-test-ids-generated-by-fill&#34;&gt;An explanation of test IDs generated by &lt;code&gt;fill&lt;/code&gt;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;test-case-organization&#34;&gt;Test Case Organization&lt;/h2&gt;&#xA;&lt;p&gt;Test cases are implemented in Python &amp;ldquo;modules&amp;rdquo;, which are organized by folder, named after the fork where the feature-under-test was introduced, for example:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;tests/cancun/&lt;/code&gt; contains tests for features added in the Cancun hardfork.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;tests/prague/&lt;/code&gt; contains tests for features added in the Prague hardfork.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;test-id-generation&#34;&gt;Test ID generation&lt;/h2&gt;&#xA;&lt;p&gt;A test ID is a string, generated by the test framework, that uniquely identifies a test case. It&amp;rsquo;s format is:&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/filling_tests/transition_tool_support/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/filling_tests/transition_tool_support/</guid>
      <description>&lt;h1 id=&#34;transition-tool-support&#34;&gt;Transition Tool Support&lt;/h1&gt;&#xA;&lt;p&gt;The following transition tools are supported by the framework:&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Client&lt;/th&gt;&#xA;          &lt;th&gt;&lt;code&gt;t8n&lt;/code&gt; Tool&lt;/th&gt;&#xA;          &lt;th&gt;Tracing Support&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://github.com/ethereum/evmone&#34;&gt;ethereum/evmone&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;evmone-t8n&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Yes&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://github.com/ethereum/execution-specs&#34;&gt;ethereum/execution-specs&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://github.com/petertdavies/ethereum-spec-evm-resolver&#34;&gt;&lt;code&gt;ethereum-spec-evm-resolver&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Yes&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://github.com/ethereumjs/ethereumjs-monorepo&#34;&gt;ethereumjs&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://github.com/ethereumjs/ethereumjs-monorepo/tree/master/packages/vm/test/t8n&#34;&gt;&lt;code&gt;ethereumjs-t8ntool.sh&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;No&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://github.com/ethereum/go-ethereum&#34;&gt;ethereum/go-ethereum&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://github.com/ethereum/go-ethereum/tree/master/cmd/evm&#34;&gt;&lt;code&gt;evm t8n&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Yes&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://github.com/hyperledger/besu/tree/main/ethereum/evmtool&#34;&gt;hyperledger/besu&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://github.com/hyperledger/besu/tree/main/ethereum/evmtool&#34;&gt;&lt;code&gt;evmtool t8n-server&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Yes&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://github.com/status-im/nimbus-eth1&#34;&gt;status-im/nimbus-eth1&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://github.com/status-im/nimbus-eth1/blob/master/tools/t8n/readme.md&#34;&gt;&lt;code&gt;t8n&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Yes&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;</description>
    </item>
  </channel>
</rss>
