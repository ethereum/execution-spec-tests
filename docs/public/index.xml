<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>EEST Docs</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on EEST Docs</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 09 Jul 2025 12:42:33 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Checklist Templates</title>
      <link>http://localhost:1313/main/</link>
      <pubDate>Wed, 09 Jul 2025 12:42:33 +0000</pubDate>
      <guid>http://localhost:1313/main/</guid>
      <description>&lt;h1 id=&#34;testing-checklist-templates&#34;&gt;Testing Checklist Templates&lt;/h1&gt;&#xA;&lt;p&gt;This page includes checklist templates that must be followed to guarantee a minimum base testing coverage of new EIP feature.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Coding Standards</title>
      <link>http://localhost:1313/main/</link>
      <pubDate>Wed, 09 Jul 2025 12:42:33 +0000</pubDate>
      <guid>http://localhost:1313/main/</guid>
      <description>&lt;h1 id=&#34;code-standards&#34;&gt;&lt;a href=&#34;#test-abc&#34;&gt;Code Standards&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;p&gt;This documentation has been relocated.&lt;/p&gt;&#xA;&lt;h2 id=&#34;yyyyyyyyyy&#34;&gt;yyyyyyyyyy&lt;/h2&gt;&#xA;&lt;p&gt;yeet&lt;/p&gt;</description>
    </item>
    <item>
      <title>Consume</title>
      <link>http://localhost:1313/main/</link>
      <pubDate>Wed, 09 Jul 2025 12:42:33 +0000</pubDate>
      <guid>http://localhost:1313/main/</guid>
      <description>&lt;h1 id=&#34;the-consume-command&#34;&gt;The &lt;code&gt;consume&lt;/code&gt; Command&lt;/h1&gt;&#xA;&lt;p&gt;The EEST &lt;code&gt;consume&lt;/code&gt; command implements different methods to run EEST-generated test fixtures against clients:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uv run consume &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;OPTIONS&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; SUBCOMMAND &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;ARGS&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For help with installation, see &lt;a href=&#34;../../getting_started/main.md&#34;&gt;Installation&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;This section provides help for running the EEST commands directly (as opposed to running as a &lt;code&gt;./hive&lt;/code&gt; &lt;a href=&#34;../hive/main.md&#34;&gt;standalone command&lt;/a&gt;, where applicable) see:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;./cache.md&#34;&gt;Consume Cache &amp;amp; Fixture Inputs&lt;/a&gt; for how to specify &lt;code&gt;consume&lt;/code&gt; fixture input.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;./direct.md&#34;&gt;Consume Direct&lt;/a&gt; to run test fixtures against direct client interfaces.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;./simulators.md&#34;&gt;Consume Simulators&lt;/a&gt; for help with Hive Simulators.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Developer Documentation</title>
      <link>http://localhost:1313/main/</link>
      <pubDate>Wed, 09 Jul 2025 12:42:33 +0000</pubDate>
      <guid>http://localhost:1313/main/</guid>
      <description>&lt;p&gt;This documentation is aimed at &lt;code&gt;execution-spec-tests&lt;/code&gt; developers:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;./configurations.md&#34;&gt;Managing configurations&lt;/a&gt;: Instructions for setting up and modifying test configurations.&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;./interactive_usage.md&#34;&gt;Interactive usage&lt;/a&gt;: Guide on interactive use of EEST packages using &lt;code&gt;ipython&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;./documenting_clis.md&#34;&gt;Documenting CLI commands&lt;/a&gt;: Instructions for documenting command line interfaces (CLIs).&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;./coding_style.md&#34;&gt;Coding style&lt;/a&gt;: Standards and best practices for code formatting and to maintain consistency across the repository.&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;./logging.md&#34;&gt;Logging&lt;/a&gt;: Documentation on using the custom logging system with enhanced features.&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;./precommit.md&#34;&gt;Enabling pre-commit checks&lt;/a&gt;: A guide for setting up pre-commit hooks to enforce code quality before commits.&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;./test_actions_locally.md&#34;&gt;Running github actions locally&lt;/a&gt;: Instructions for testing GitHub Actions workflows on your local machine to streamline development and debugging.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;These sections are primarily aimed at &lt;code&gt;execution-spec-tests&lt;/code&gt; maintainers:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Execute</title>
      <link>http://localhost:1313/main/</link>
      <pubDate>Wed, 09 Jul 2025 12:42:33 +0000</pubDate>
      <guid>http://localhost:1313/main/</guid>
      <description>&lt;h1 id=&#34;executing-tests-on-local-networks-or-hive&#34;&gt;Executing Tests on Local Networks or Hive&lt;/h1&gt;&#xA;&lt;p&gt;@ethereum/execution-spec-tests is capable of running tests on local networks or on Hive with a few considerations. The &lt;code&gt;execute&lt;/code&gt; command runs test cases directly from the Python source (without the use of JSON fixtures).&lt;/p&gt;&#xA;&lt;p&gt;See:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;./hive.md&#34;&gt;Execute Hive&lt;/a&gt; for help with the &lt;code&gt;execute&lt;/code&gt; simulator in order to run tests on a single-client local network.&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;./remote.md&#34;&gt;Execute Remote&lt;/a&gt; for help with executing tests on a remote network such as a devnet, or even mainnet.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;The rest of this page describes how &lt;code&gt;execute&lt;/code&gt; works and explains its architecture.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Execution Spec Tests</title>
      <link>http://localhost:1313/main/</link>
      <pubDate>Wed, 09 Jul 2025 12:42:33 +0000</pubDate>
      <guid>http://localhost:1313/main/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/main/execution_spec_tests.jpg&#34; alt=&#34;Execution Spec Tests Logo&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ethereum/execution-spec-tests/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ethereum/execution-spec-tests&lt;/a&gt; is both a collection of test cases and a framework in Python to generate tests for Ethereum execution clients.&lt;/p&gt;&#xA;&lt;p&gt;The framework collects and executes the test cases in order to generate &lt;em&gt;test fixtures&lt;/em&gt; (JSON) which can be consumed by any execution client to verify their implementation of &lt;a href=&#34;https://github.com/ethereum/execution-specs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ethereum/execution-specs&lt;/a&gt;. The fixtures, which define state transition and block tests, are generated by the framework using one of the &lt;code&gt;t8n&lt;/code&gt; command-line tools that are provided by most execution clients, see below for an overview of the supported &lt;code&gt;t8n&lt;/code&gt; tools.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Filling Tests</title>
      <link>http://localhost:1313/main/</link>
      <pubDate>Wed, 09 Jul 2025 12:42:33 +0000</pubDate>
      <guid>http://localhost:1313/main/</guid>
      <description>&lt;p&gt;Execution of test cases against clients is a two-step process:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;JSON test fixtures are generated from the Python test cases found in &lt;code&gt;./tests&lt;/code&gt; using &lt;code&gt;fill&lt;/code&gt; and an EVM transition tool (&lt;code&gt;t8n&lt;/code&gt;) implementation.&lt;/li&gt;&#xA;&lt;li&gt;Clients &amp;ldquo;consume&amp;rdquo; the JSON fixtures via either a dedicated, client-specific interface or a testing environment such as Hive.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;The process of generating fixtures is often referred to as &amp;ldquo;filling&amp;rdquo; the tests.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;callout callout-info&#34;&gt;&#xA;  &lt;div class=&#34;callout-title&#34;&gt;The &lt;code&gt;execute&lt;/code&gt; command&lt;/div&gt;&#xA;  &lt;div class=&#34;callout-content&#34;&gt;&#xA;    The &lt;code&gt;execute&lt;/code&gt; command directly executes Python test cases against a client via its RPC without using generated JSON fixtures. For all other methods of testing clients, the JSON fixtures are required. For more information, see &lt;a href=&#34;../running_tests/execute/main.md&#34;&gt;Executing Tests&lt;/a&gt;.&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;h2 id=&#34;transition-tools-t8n&#34;&gt;Transition Tools (&lt;code&gt;t8n&lt;/code&gt;)&lt;/h2&gt;&#xA;&lt;p&gt;The &lt;code&gt;fill&lt;/code&gt; command requires an EVM &lt;code&gt;t8n&lt;/code&gt; tool provided by most clients in order to generate the JSON fixtures. The &lt;code&gt;t8n&lt;/code&gt; tool is mainly responsible for calculating the post-state of the EVM after executing a transaction, most relevantly, it calculates the updated state root.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Getting Started</title>
      <link>http://localhost:1313/main/</link>
      <pubDate>Wed, 09 Jul 2025 12:42:33 +0000</pubDate>
      <guid>http://localhost:1313/main/</guid>
      <description>&lt;h1 id=&#34;installation&#34;&gt;Installation&lt;/h1&gt;&#xA;&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;&#xA;&lt;p&gt;The tools provided by &lt;a href=&#34;https://github.com/ethereum/execution-spec-tests&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;execution-spec-tests&lt;/a&gt; use &lt;code&gt;uv&lt;/code&gt; (&lt;a href=&#34;https://docs.astral.sh/uv/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;docs.astral.sh/uv&lt;/a&gt;) to manage their dependencies and virtual environment.&lt;/p&gt;&#xA;&lt;p&gt;It&amp;rsquo;s typically recommended to use the latest version of &lt;code&gt;uv&lt;/code&gt;, currently &lt;code&gt;uv&amp;gt;=0.5.22&lt;/code&gt; is required.&lt;/p&gt;&#xA;&lt;p&gt;The latest version of &lt;code&gt;uv&lt;/code&gt; can be installed via &lt;code&gt;curl&lt;/code&gt; (recommended; can self-update via &lt;code&gt;uv self update&lt;/code&gt;) or pip (requires Python, can&amp;rsquo;t self-update):&lt;/p&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;  &#xA;  &#xA;  &#xA;&#xA;&#xA;&#xA;  &#xA;  &#xA;  &#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;tab-container&#34; data-tab-group=&#34;tabs-0&#34;&gt;&#xA;  &lt;div class=&#34;tab-header&#34;&gt;&#xA;    &#xA;      &lt;button class=&#34;tab-button active&#34; &#xA;              onclick=&#34;switchTab(&#39;tabs-0&#39;,  0 )&#34;&gt;&#xA;        curl&#xA;      &lt;/button&gt;&#xA;    &#xA;      &lt;button class=&#34;tab-button &#34; &#xA;              onclick=&#34;switchTab(&#39;tabs-0&#39;,  1 )&#34;&gt;&#xA;        pip&#xA;      &lt;/button&gt;&#xA;    &#xA;  &lt;/div&gt;&#xA;  &#xA;  &lt;div class=&#34;tab-panels&#34;&gt;&#xA;    &#xA;      &lt;div class=&#34;tab-panel active&#34;&gt;&#xA;        &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl -LsSf https://astral.sh/uv/install.sh | sh&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;      &lt;/div&gt;&#xA;    &#xA;      &lt;div class=&#34;tab-panel &#34;&gt;&#xA;        &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pip install uv&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;      &lt;/div&gt;&#xA;    &#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;style&gt;&#xA;    .tab-container {&#xA;      margin: 1.5rem 0;&#xA;      background: #f8f9fa;&#xA;      border-radius: 8px;&#xA;      overflow: hidden;&#xA;      box-shadow: 0 1px 3px rgba(0,0,0,0.1);&#xA;    }&#xA;    &#xA;    .tab-header {&#xA;      display: flex;&#xA;      background: #e9ecef;&#xA;       &#xA;    }&#xA;    &#xA;    .tab-button {&#xA;      flex: 1;  &#xA;      padding: 0.75rem 1rem;&#xA;      border: none;&#xA;      background: transparent;&#xA;      cursor: pointer;&#xA;      font-size: 14px;&#xA;      white-space: nowrap;&#xA;      transition: all 0.2s;&#xA;      position: relative;&#xA;      text-align: center;  &#xA;      overflow: hidden;  &#xA;      text-overflow: ellipsis;  &#xA;    }&#xA;    &#xA;    .tab-button:hover {&#xA;      background: rgba(0,0,0,0.05);&#xA;    }&#xA;    &#xA;    .tab-button.active {&#xA;      background: #f8f9fa;&#xA;      font-weight: 600;&#xA;      color: #007bff;&#xA;    }&#xA;    &#xA;    .tab-button.active::after {&#xA;      content: &#39;&#39;;&#xA;      position: absolute;&#xA;      bottom: 0;&#xA;      left: 0;&#xA;      right: 0;&#xA;      height: 3px;&#xA;      background: #007bff;&#xA;    }&#xA;    &#xA;    .tab-button code {&#xA;      background: rgba(0,0,0,0.1);&#xA;      padding: 2px 4px;&#xA;      border-radius: 3px;&#xA;      font-size: 12px;&#xA;    }&#xA;    &#xA;    .tab-panel {&#xA;      display: none;&#xA;      padding: 1.5rem;&#xA;      background: white;&#xA;    }&#xA;    &#xA;    .tab-panel.active {&#xA;      display: block;&#xA;    }&#xA;    &#xA;    .tab-panel pre {&#xA;      margin: 0;&#xA;      background: #f6f8fa;&#xA;      border: 1px solid #e1e4e8;&#xA;    }&#xA;    &#xA;     &#xA;    @media (max-width: 768px) {&#xA;      .tab-header {&#xA;        flex-wrap: wrap;  &#xA;      }&#xA;      &#xA;      .tab-button {&#xA;        flex: 1 1 50%;  &#xA;        padding: 0.5rem 0.75rem;&#xA;        font-size: 13px;&#xA;      }&#xA;      &#xA;       &#xA;      @media (max-width: 480px) {&#xA;        .tab-button {&#xA;          flex: 1 1 100%;  &#xA;        }&#xA;      }&#xA;    }&#xA;&lt;/style&gt;&#xA;&#xA;&lt;script&gt;&#xA;function switchTab(groupId, tabIndex) {&#xA;  const container = document.querySelector(`[data-tab-group=&#34;${groupId}&#34;]`);&#xA;  &#xA;  &#xA;  container.querySelectorAll(&#39;.tab-button&#39;).forEach((btn, idx) =&gt; {&#xA;    btn.classList.toggle(&#39;active&#39;, idx === tabIndex);&#xA;  });&#xA;  &#xA;  &#xA;  container.querySelectorAll(&#39;.tab-panel&#39;).forEach((panel, idx) =&gt; {&#xA;    panel.classList.toggle(&#39;active&#39;, idx === tabIndex);&#xA;  });&#xA;}&#xA;&lt;/script&gt;&#xA;&lt;p&gt;If installed via &lt;code&gt;curl&lt;/code&gt;, &lt;code&gt;uv&lt;/code&gt; will download Python for your target platform if one of the required versions (Python 3.11 or 3.12) is not available natively.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hive</title>
      <link>http://localhost:1313/main/</link>
      <pubDate>Wed, 09 Jul 2025 12:42:33 +0000</pubDate>
      <guid>http://localhost:1313/main/</guid>
      <description>&lt;h1 id=&#34;hive&#34;&gt;Hive&lt;/h1&gt;&#xA;&lt;p&gt;@ethereum/hive is a containerized testing framework that helps orchestrate test execution against Ethereum clients. Hive is incredibly extensible; new test suites can be implemented in a module manner as &amp;ldquo;simulators&amp;rdquo; that interact with clients to test certain aspects of their behavior. EEST implements several simulators, see &lt;a href=&#34;../running.md&#34;&gt;Running Tests&lt;/a&gt; for an overview.&lt;/p&gt;&#xA;&lt;h2 id=&#34;quick-start&#34;&gt;Quick Start&lt;/h2&gt;&#xA;&lt;h3 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Docker: &lt;a href=&#34;https://docs.docker.com/get-docker/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://docs.docker.com/get-docker/&lt;/a&gt;.&lt;/li&gt;&#xA;&lt;li&gt;Golang 1.22+: &lt;a href=&#34;https://go.dev/doc/install&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://go.dev/doc/install&lt;/a&gt;.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;installation&#34;&gt;Installation&lt;/h3&gt;&#xA;&lt;p&gt;Clone @ethereum/hive and build the &lt;code&gt;./hive&lt;/code&gt; command:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone https://github.com/ethereum/hive&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd hive&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;go build .&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Running Tests</title>
      <link>http://localhost:1313/main/</link>
      <pubDate>Wed, 09 Jul 2025 12:42:33 +0000</pubDate>
      <guid>http://localhost:1313/main/</guid>
      <description>&lt;p&gt;This section documents how EL clients can run EEST tests to verify their implementations. The information is organized as follows:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://localhost:1313/main/&#34;&gt;Methods of Running Tests&lt;/a&gt;:&lt;/strong&gt; A detailed overview and comparison.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://localhost:1313/main/&#34;&gt;EEST Fixture Releases&lt;/a&gt;:&lt;/strong&gt; The available release types; release versioning.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://localhost:1313/main/&#34;&gt;Test Fixture Specifications&lt;/a&gt;&lt;/strong&gt; and guides to implement direct consumer interfaces.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://localhost:1313/main/&#34;&gt;Hive&lt;/a&gt;:&lt;/strong&gt; Help running EEST Hive simulators.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://localhost:1313/main/&#34;&gt;Consume&lt;/a&gt;:&lt;/strong&gt; Commands that help clients run tests by consuming test fixtures.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://localhost:1313/main/&#34;&gt;Execute&lt;/a&gt;:&lt;/strong&gt; Commands that help clients run tests by executing test source.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Test Formats</title>
      <link>http://localhost:1313/main/</link>
      <pubDate>Wed, 09 Jul 2025 12:42:33 +0000</pubDate>
      <guid>http://localhost:1313/main/</guid>
      <description>&lt;h1 id=&#34;test-fixture-specifications&#34;&gt;Test Fixture Specifications&lt;/h1&gt;&#xA;&lt;p&gt;The following sub-sections provide:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Specifications for each test fixture format with an explanation of each field and its type.&lt;/li&gt;&#xA;&lt;li&gt;Guides on how to consume each format.&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Tutorials</title>
      <link>http://localhost:1313/main/</link>
      <pubDate>Wed, 09 Jul 2025 12:42:33 +0000</pubDate>
      <guid>http://localhost:1313/main/</guid>
      <description>&lt;h1 id=&#34;tutorials&#34;&gt;Tutorials&lt;/h1&gt;&#xA;&lt;p&gt;Show overview of existing tutorials&lt;/p&gt;</description>
    </item>
    <item>
      <title>Writing Tests</title>
      <link>http://localhost:1313/main/</link>
      <pubDate>Wed, 09 Jul 2025 12:42:33 +0000</pubDate>
      <guid>http://localhost:1313/main/</guid>
      <description>&lt;p&gt;The easiest way to get started is to use the interactive CLI:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uv run eest make test&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and modify the generated test module to suit your needs.&lt;/p&gt;&#xA;&lt;p&gt;For help deciding which test format to select, see &lt;a href=&#34;types_of_tests.md&#34;&gt;Types of Tests&lt;/a&gt;, in particular &lt;a href=&#34;types_of_tests.md#deciding-on-a-test-type&#34;&gt;Deciding on a Test Type&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;key-resources&#34;&gt;Key Resources&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://localhost:1313/main/#test-abc&#34;&gt;Coding Standards&lt;/a&gt; - Code style and standards for this repository&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;adding_a_new_test.md&#34;&gt;Adding a New Test&lt;/a&gt; - Step-by-step guide to adding new tests&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;writing_a_new_test.md&#34;&gt;Writing a New Test&lt;/a&gt; - Detailed guide on writing different test types&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;fork_methods.md&#34;&gt;Using and Extending Fork Methods&lt;/a&gt; - How to use fork methods to write fork-adaptive tests&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;porting_legacy_tests.md&#34;&gt;Porting tests&lt;/a&gt;: A guide to porting @ethereum/tests to EEST.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Please check that your code adheres to the repo&amp;rsquo;s coding standards and read the other pages in this section for more background and an explanation of how to implement state transition and blockchain tests.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/main/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/main/</guid>
      <description>&lt;h1 id=&#34;changelog&#34;&gt;Changelog&lt;/h1&gt;&#xA;&lt;p&gt;Test fixtures for use by clients are available for each release on the &lt;a href=&#34;https://github.com/ethereum/execution-spec-tests/releases&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Github releases page&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Key:&lt;/strong&gt; ✨ = New, 🐞 = Fixed, 🔀 = Changed. 💥 = Breaking&lt;/p&gt;&#xA;&lt;h2 id=&#34;-unreleased&#34;&gt;🔜 [Unreleased]&lt;/h2&gt;&#xA;&lt;h3 id=&#34;-breaking-changes&#34;&gt;💥 Breaking Changes&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Python 3.10 support was removed in this release (&lt;a href=&#34;https://github.com/ethereum/execution-spec-tests/pull/1808&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;#1808&lt;/a&gt;).&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;-important-change-for-test-contributors&#34;&gt;💥 Important Change for test contributors&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;EEST no longer allows usage of Yul code in Python tests. From now on, please make use of our opcode wrapper. Yul code is now only allowed in the &amp;ldquo;static tests&amp;rdquo; located in &lt;code&gt;./tests/static/&lt;/code&gt; (these are test cases defined by JSON and YAML files instead of Python test functions that were originally maintained in &lt;a href=&#34;https://github.com/ethereum/tests&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ethereum/tests&lt;/a&gt;).&lt;/li&gt;&#xA;&lt;li&gt;In order to fill the static tests (which is not the case by default), please ensure that &lt;code&gt;solc&lt;/code&gt; is located in your &lt;code&gt;PATH&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;-important-change-for-fill-users&#34;&gt;💥 Important Change for &lt;code&gt;fill&lt;/code&gt; Users&lt;/h4&gt;&#xA;&lt;p&gt;The output behavior of &lt;code&gt;fill&lt;/code&gt; has changed (&lt;a href=&#34;https://github.com/ethereum/execution-spec-tests/pull/1608&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;#1608&lt;/a&gt;):&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/main/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/main/</guid>
      <description>&lt;h1 id=&#34;changelog-section-template&#34;&gt;Changelog Section Template&lt;/h1&gt;&#xA;&lt;p&gt;The following can be copy-pasted into the &lt;code&gt;CHANGELOG.md&lt;/code&gt; file for a new release.&lt;/p&gt;&#xA;&lt;h2 id=&#34;-unreleased&#34;&gt;🔜 [Unreleased]&lt;/h2&gt;&#xA;&lt;h3 id=&#34;-breaking-change&#34;&gt;💥 Breaking Change&lt;/h3&gt;&#xA;&lt;h3 id=&#34;-framework&#34;&gt;🛠️ Framework&lt;/h3&gt;&#xA;&lt;h4 id=&#34;fill&#34;&gt;&lt;code&gt;fill&lt;/code&gt;&lt;/h4&gt;&#xA;&lt;h4 id=&#34;consume&#34;&gt;&lt;code&gt;consume&lt;/code&gt;&lt;/h4&gt;&#xA;&lt;h3 id=&#34;-misc&#34;&gt;📋 Misc&lt;/h3&gt;&#xA;&lt;h3 id=&#34;-test-cases&#34;&gt;🧪 Test Cases&lt;/h3&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/main/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/main/</guid>
      <description>&lt;h1 id=&#34;coding-style&#34;&gt;Coding Style&lt;/h1&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;callout callout-warning&#34;&gt;&#xA;  &lt;div class=&#34;callout-title&#34;&gt;Documentation Moved&lt;/div&gt;&#xA;  &lt;div class=&#34;callout-content&#34;&gt;&#xA;    This documentation has been relocated to &lt;a href=&#34;../getting_started/code_standards.md&#34;&gt;Getting Started -&amp;gt; Code Standards&lt;/a&gt;. Please use the new location for the most up-to-date information.&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/main/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/main/</guid>
      <description>&lt;h1 id=&#34;managing-configurations&#34;&gt;Managing Configurations&lt;/h1&gt;&#xA;&lt;p&gt;Configurations are managed by the &lt;code&gt;config&lt;/code&gt; package. It provides both environment and application configurations.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── src&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   └── 📁 config  [Application wide environment and configurations]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│       ├── 📄 __init__.py&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│       ├── 📄 app.py [Configurations for application framework]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│       ├── 📄 docs.py [Configurations for documentation]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│       └── 📄 env.py  [Exposes `env.yaml` to the application]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;└── 📄 env.yaml [Environment file (git ignored)]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;environment-configurations&#34;&gt;Environment Configurations&lt;/h2&gt;&#xA;&lt;p&gt;Application-wide &lt;a href=&#34;https://www.12factor.net/config&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;environment configuration&lt;/a&gt;, which varies across staging, production, and development environments are read from &lt;code&gt;env.yaml&lt;/code&gt; in the project root.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/main/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/main/</guid>
      <description>&lt;h1 id=&#34;eest-dependency-management-and-packaging&#34;&gt;EEST Dependency Management and Packaging&lt;/h1&gt;&#xA;&lt;p&gt;EEST uses &lt;a href=&#34;https://docs.astral.sh/uv/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;uv&lt;/code&gt;&lt;/a&gt; to manage and pin its dependencies.&lt;/p&gt;&#xA;&lt;p&gt;Please use &lt;code&gt;uv&amp;gt;=0.7.0&lt;/code&gt; to ensure &lt;code&gt;uv&lt;/code&gt; writes &lt;code&gt;uv.lock&lt;/code&gt; files with consistent fields and formatting (see [ethereum/execution-spec-tests#1597]https://github.com/ethereum/execution-spec-tests/pull/1597).&lt;/p&gt;&#xA;&lt;h2 id=&#34;managing-dependencies&#34;&gt;Managing Dependencies&lt;/h2&gt;&#xA;&lt;p&gt;We aim to provide specific &lt;a href=&#34;https://peps.python.org/pep-0440/#version-specifiers&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;version specifiers&lt;/a&gt; for each of our direct and extra dependencies.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;callout callout-info&#34;&gt;&#xA;  &lt;div class=&#34;callout-title&#34;&gt;Packages should be managed via &lt;code&gt;uv&lt;/code&gt;&lt;/div&gt;&#xA;  &lt;div class=&#34;callout-content&#34;&gt;&#xA;    &lt;p&gt;Dependencies should be managed using &lt;code&gt;uv&lt;/code&gt; on the command-line to ensure that version compatibility is ensured across all dependencies and that &lt;code&gt;uv.lock&lt;/code&gt; is updated as required.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/main/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/main/</guid>
      <description>&lt;h1 id=&#34;documentation&#34;&gt;Documentation&lt;/h1&gt;&#xA;&lt;p&gt;The &lt;code&gt;execution-spec-tests&lt;/code&gt; documentation is generated via &lt;a href=&#34;https://github.com/gohugoio/hugo&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;hugo&lt;/code&gt;&lt;/a&gt; and hosted remotely on Github Pages at &lt;a href=&#34;https://eest.ethereum.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;eest.ethereum.org&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;&#xA;&lt;p&gt;Grab the latest &lt;code&gt;hugo&lt;/code&gt; binary from the official release page or build it yourself. Then make the binary executable and add it to the PATH (or to a directory that has already been added to the PATH like e.g. &lt;code&gt;/usr/local/bin/&lt;/code&gt;). We do not require any additional plugins or dependencies.&lt;/p&gt;&#xA;&lt;h2 id=&#34;build-and-locally-host-the-documentation&#34;&gt;Build and Locally Host the Documentation&lt;/h2&gt;&#xA;&lt;p&gt;Build the docs:&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/main/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/main/</guid>
      <description>&lt;h1 id=&#34;documenting-clis&#34;&gt;Documenting CLIs&lt;/h1&gt;&#xA;&lt;p&gt;EEST command line interfaces (CLIs) are documented using the &lt;a href=&#34;https://click.palletsprojects.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;click&lt;/code&gt;&lt;/a&gt; library&amp;rsquo;s built-in help system and the &lt;a href=&#34;https://github.com/mkdocs/mkdocs-click&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;mkdocs-click&lt;/code&gt;&lt;/a&gt; extension for mkdocs. This allows generation of CLI documentation directly from the (click) source code, ensuring that the documentation is always up-to-date with the code.&lt;/p&gt;&#xA;&lt;p&gt;Current limitations:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;code&gt;mkdocs serve&lt;/code&gt; does not automatically update the CLI documentation when the source code changes. You must restart the server to see the changes.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;mkdocs-click&lt;/code&gt; does not automatically generate a short help string from sub-command docstrings. You must provide a short help string for each sub-command in the source code with &lt;code&gt;@click.command(short_help=&amp;quot;...&amp;quot;)&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/ethereum/execution-spec-tests/blob/main/docs/library/cli/evm_bytes.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;markdown&lt;/a&gt; and corresponding &lt;a href=&#34;https://github.com/ethereum/execution-spec-tests/blob/main/src/cli/evm_bytes.py&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Python docstrings&lt;/a&gt; for the &lt;a href=&#34;../library/cli/evm_bytes.md&#34;&gt;&lt;code&gt;evm_bytes&lt;/code&gt; CLI documentation&lt;/a&gt; as an example of how to document a CLI using &lt;code&gt;mkdocs-click&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/main/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/main/</guid>
      <description>&lt;h1 id=&#34;working-with-eest-libraries-interactively&#34;&gt;Working with EEST Libraries Interactively&lt;/h1&gt;&#xA;&lt;p&gt;You can work with EEST Python packages interactively with &lt;code&gt;ipython&lt;/code&gt; using:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uvx  --with-editable . ipython&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This command will create a virtual environment, install EEST&amp;rsquo;s packages in &amp;ldquo;&lt;a href=&#34;https://setuptools.pypa.io/en/latest/userguide/development_mode.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;editable mode&lt;/a&gt;&amp;rdquo; (source changes get reflected in the interactive shell), and start an &lt;code&gt;ipython&lt;/code&gt; shell. You can then import any of the packages and experiment with them interactively.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;callout callout-info&#34;&gt;&#xA;  &lt;div class=&#34;callout-title&#34;&gt;Example: Working with &lt;code&gt;ethereum_test_forks&lt;/code&gt;&lt;/div&gt;&#xA;  &lt;div class=&#34;callout-content&#34;&gt;&#xA;    &lt;p&gt;See which defined forks are &amp;ldquo;ignored&amp;rdquo; by default:&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/main/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/main/</guid>
      <description>&lt;h1 id=&#34;logging&#34;&gt;Logging&lt;/h1&gt;&#xA;&lt;p&gt;This document describes the logging system used in the Ethereum Execution Spec Tests project. Currently, logging is only supported for &lt;code&gt;consume&lt;/code&gt; commands.&lt;/p&gt;&#xA;&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;&#xA;&lt;p&gt;The project uses Python&amp;rsquo;s standard logging module with custom extensions to provide enhanced logging capabilities. Our logging system is implemented in the &lt;code&gt;src/pytest_plugins/logging.py&lt;/code&gt; module and provides the following features:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Custom log levels between the standard Python log levels&lt;/li&gt;&#xA;&lt;li&gt;Timestamps with millisecond precision in UTC&lt;/li&gt;&#xA;&lt;li&gt;Color-coded log output (when not running in Docker)&lt;/li&gt;&#xA;&lt;li&gt;File logging with a consistent naming pattern&lt;/li&gt;&#xA;&lt;li&gt;Integration with pytest&amp;rsquo;s output capture&lt;/li&gt;&#xA;&lt;li&gt;Support for distributed test execution with pytest-xdist&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;custom-log-levels&#34;&gt;Custom Log Levels&lt;/h2&gt;&#xA;&lt;p&gt;In addition to the standard Python log levels (DEBUG, INFO, WARNING, ERROR, CRITICAL), we&amp;rsquo;ve added the following custom levels:&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/main/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/main/</guid>
      <description>&lt;h1 id=&#34;enabling-pre-commit-checks&#34;&gt;Enabling Pre-Commit Checks&lt;/h1&gt;&#xA;&lt;p&gt;There&amp;rsquo;s a &lt;a href=&#34;https://pre-commit.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;pre-commit&lt;/a&gt; config file available in the repository root (&lt;code&gt;.pre-commit-config.yaml&lt;/code&gt;) that can be used to enable automatic checks upon commit - the commit will not go through if the checks don&amp;rsquo;t pass.&lt;/p&gt;&#xA;&lt;p&gt;To enable pre-commit, the following must be run once:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uvx pre-commit install&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;&#xA;&lt;div class=&#34;callout callout-info&#34;&gt;&#xA;  &lt;div class=&#34;callout-title&#34;&gt;Bypassing pre-commit checks&lt;/div&gt;&#xA;  &lt;div class=&#34;callout-content&#34;&gt;&#xA;    &lt;p&gt;Enabling of pre-commit checks is not mandatory (it cannot be enforced) and even if it is enabled, it can always be bypassed with:&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/main/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/main/</guid>
      <description>&lt;h1 id=&#34;running-github-actions-locally&#34;&gt;Running Github Actions Locally&lt;/h1&gt;&#xA;&lt;p&gt;The Github Actions workflows can be tested locally using &lt;a href=&#34;https://github.com/nektos/act&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;nektos/act&lt;/a&gt; without pushing changes to the remote. The local repository state will be used in the executed workflow.&lt;/p&gt;&#xA;&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;A docker installation without &lt;code&gt;sudo&lt;/code&gt; prefix requirement (&lt;a href=&#34;https://docs.docker.com/engine/install/linux-postinstall/#manage-docker-as-a-non-root-user&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;see also dockerdocs&lt;/a&gt;):&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo usermod -aG docker $USER&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Install the Github CLI (&lt;code&gt;gh&lt;/code&gt;): &lt;a href=&#34;https://github.com/cli/cli/blob/trunk/docs/install_linux.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;linux&lt;/a&gt;, &lt;a href=&#34;https://github.com/cli/cli/tree/trunk?tab=readme-ov-file#macos&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;macos&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Authenticate your Github account with the Github CLI:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gh auth login&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is required to set &lt;code&gt;GITHUB_TOKEN&lt;/code&gt; to the output of &lt;code&gt;gh auth token&lt;/code&gt; when running the workflows.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/main/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/main/</guid>
      <description>&lt;h1 id=&#34;debugging-transition-tools&#34;&gt;Debugging Transition Tools&lt;/h1&gt;&#xA;&lt;p&gt;There are two flags that can help debugging &lt;code&gt;t8n&lt;/code&gt; tools or the execution-spec-tests framework:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;code&gt;--evm-dump-dir&lt;/code&gt; (Default: &lt;repo&gt;/logs/evm): Write debug information from &lt;code&gt;t8n&lt;/code&gt; tool calls to the specified directory.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;--traces&lt;/code&gt;: Collect traces of the execution from the transition tool.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;--verify-fixtures&lt;/code&gt;: Run go-ethereum&amp;rsquo;s &lt;code&gt;evm blocktest&lt;/code&gt; command to verify the generated test fixtures.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;evm-dump-directory&#34;&gt;EVM Dump Directory&lt;/h2&gt;&#xA;&lt;p&gt;The &lt;code&gt;--evm-dump-dir&lt;/code&gt; flag tells the framework to write the inputs and outputs of every call made to the &lt;code&gt;t8n&lt;/code&gt; command to the specified output directory. The aim is to help debugging or simply understand how a test is interacting with the EVM. The default location is &lt;code&gt;logs/evm&lt;/code&gt; in the project root.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/main/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/main/</guid>
      <description>&lt;h1 id=&#34;filling-tests-at-a-prompt&#34;&gt;Filling Tests at a Prompt&lt;/h1&gt;&#xA;&lt;p&gt;The execution-spec-tests test framework uses the &lt;a href=&#34;https://docs.pytest.org/en/latest/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;pytest framework&lt;/a&gt; for test case collection and execution. The &lt;code&gt;fill&lt;/code&gt; command is essentially an alias for &lt;code&gt;pytest&lt;/code&gt;, which uses several &lt;a href=&#34;../library/pytest_plugins/main.md&#34;&gt;custom pytest plugins&lt;/a&gt; to run transition tools against test cases and generate JSON fixtures.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;callout callout-info&#34;&gt;&#xA;  &lt;div class=&#34;callout-title&#34;&gt;Options specific to execution-spec-tests&lt;/div&gt;&#xA;  &lt;div class=&#34;callout-content&#34;&gt;&#xA;    &lt;p&gt;The command-line options specific to filling tests can be listed via:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uv run fill --help&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;See &lt;a href=&#34;#custom-fill-command-line-options&#34;&gt;Custom &lt;code&gt;fill&lt;/code&gt; Command-Line Options&lt;/a&gt; for all options.&lt;/p&gt;&#xA;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;h2 id=&#34;collection---test-exploration&#34;&gt;Collection - Test Exploration&lt;/h2&gt;&#xA;&lt;p&gt;The test cases implemented in the &lt;code&gt;./tests&lt;/code&gt; sub-directory can be listed in the console using:&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/main/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/main/</guid>
      <description>&lt;h1 id=&#34;filling-tests-for-features-under-development&#34;&gt;Filling Tests for Features under Development&lt;/h1&gt;&#xA;&lt;h2 id=&#34;requirements&#34;&gt;Requirements&lt;/h2&gt;&#xA;&lt;p&gt;By default, execution-spec-tests only generates fixtures for forks that have been deployed to mainnet. In order to generate fixtures for evm features that are actively under development:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;A version of the &lt;code&gt;evm&lt;/code&gt; and &lt;code&gt;solc&lt;/code&gt; tools that implement the feature must be available (although, typically only a developer version of the &lt;code&gt;evm&lt;/code&gt; tool is required, usually the latest stable release of &lt;code&gt;solc&lt;/code&gt; is adequate), and,&lt;/li&gt;&#xA;&lt;li&gt;The development fork to test must be explicitly specified on the command-line:&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;  &#xA;  &#xA;  &#xA;&#xA;&#xA;&#xA;  &#xA;  &#xA;  &#xA;&#xA;&#xA;&#xA;  &#xA;  &#xA;  &#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;div class=&#34;tab-container&#34; data-tab-group=&#34;tabs-0&#34;&gt;&#xA;  &lt;div class=&#34;tab-header&#34;&gt;&#xA;    &#xA;      &lt;button class=&#34;tab-button active&#34; &#xA;              onclick=&#34;switchTab(&#39;tabs-0&#39;,  0 )&#34;&gt;&#xA;        via the &lt;code&gt;--fork&lt;/code&gt; flag&#xA;      &lt;/button&gt;&#xA;    &#xA;      &lt;button class=&#34;tab-button &#34; &#xA;              onclick=&#34;switchTab(&#39;tabs-0&#39;,  1 )&#34;&gt;&#xA;        via the &lt;code&gt;--from&lt;/code&gt; flag&#xA;      &lt;/button&gt;&#xA;    &#xA;      &lt;button class=&#34;tab-button &#34; &#xA;              onclick=&#34;switchTab(&#39;tabs-0&#39;,  2 )&#34;&gt;&#xA;        via the &lt;code&gt;--until&lt;/code&gt; flag&#xA;      &lt;/button&gt;&#xA;    &#xA;  &lt;/div&gt;&#xA;  &#xA;  &lt;div class=&#34;tab-panels&#34;&gt;&#xA;    &#xA;      &lt;div class=&#34;tab-panel active&#34;&gt;&#xA;        &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uv run fill -k 4844 --fork=Cancun -v&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;      &lt;/div&gt;&#xA;    &#xA;      &lt;div class=&#34;tab-panel &#34;&gt;&#xA;        &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uv run fill -k 4844 --from=Cancun -v&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;      &lt;/div&gt;&#xA;    &#xA;      &lt;div class=&#34;tab-panel &#34;&gt;&#xA;        &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uv run fill -k 4844 --until=Cancun -v&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;      &lt;/div&gt;&#xA;    &#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;style&gt;&#xA;    .tab-container {&#xA;      margin: 1.5rem 0;&#xA;      background: #f8f9fa;&#xA;      border-radius: 8px;&#xA;      overflow: hidden;&#xA;      box-shadow: 0 1px 3px rgba(0,0,0,0.1);&#xA;    }&#xA;    &#xA;    .tab-header {&#xA;      display: flex;&#xA;      background: #e9ecef;&#xA;       &#xA;    }&#xA;    &#xA;    .tab-button {&#xA;      flex: 1;  &#xA;      padding: 0.75rem 1rem;&#xA;      border: none;&#xA;      background: transparent;&#xA;      cursor: pointer;&#xA;      font-size: 14px;&#xA;      white-space: nowrap;&#xA;      transition: all 0.2s;&#xA;      position: relative;&#xA;      text-align: center;  &#xA;      overflow: hidden;  &#xA;      text-overflow: ellipsis;  &#xA;    }&#xA;    &#xA;    .tab-button:hover {&#xA;      background: rgba(0,0,0,0.05);&#xA;    }&#xA;    &#xA;    .tab-button.active {&#xA;      background: #f8f9fa;&#xA;      font-weight: 600;&#xA;      color: #007bff;&#xA;    }&#xA;    &#xA;    .tab-button.active::after {&#xA;      content: &#39;&#39;;&#xA;      position: absolute;&#xA;      bottom: 0;&#xA;      left: 0;&#xA;      right: 0;&#xA;      height: 3px;&#xA;      background: #007bff;&#xA;    }&#xA;    &#xA;    .tab-button code {&#xA;      background: rgba(0,0,0,0.1);&#xA;      padding: 2px 4px;&#xA;      border-radius: 3px;&#xA;      font-size: 12px;&#xA;    }&#xA;    &#xA;    .tab-panel {&#xA;      display: none;&#xA;      padding: 1.5rem;&#xA;      background: white;&#xA;    }&#xA;    &#xA;    .tab-panel.active {&#xA;      display: block;&#xA;    }&#xA;    &#xA;    .tab-panel pre {&#xA;      margin: 0;&#xA;      background: #f6f8fa;&#xA;      border: 1px solid #e1e4e8;&#xA;    }&#xA;    &#xA;     &#xA;    @media (max-width: 768px) {&#xA;      .tab-header {&#xA;        flex-wrap: wrap;  &#xA;      }&#xA;      &#xA;      .tab-button {&#xA;        flex: 1 1 50%;  &#xA;        padding: 0.5rem 0.75rem;&#xA;        font-size: 13px;&#xA;      }&#xA;      &#xA;       &#xA;      @media (max-width: 480px) {&#xA;        .tab-button {&#xA;          flex: 1 1 100%;  &#xA;        }&#xA;      }&#xA;    }&#xA;&lt;/style&gt;&#xA;&#xA;&lt;script&gt;&#xA;function switchTab(groupId, tabIndex) {&#xA;  const container = document.querySelector(`[data-tab-group=&#34;${groupId}&#34;]`);&#xA;  &#xA;  &#xA;  container.querySelectorAll(&#39;.tab-button&#39;).forEach((btn, idx) =&gt; {&#xA;    btn.classList.toggle(&#39;active&#39;, idx === tabIndex);&#xA;  });&#xA;  &#xA;  &#xA;  container.querySelectorAll(&#39;.tab-panel&#39;).forEach((panel, idx) =&gt; {&#xA;    panel.classList.toggle(&#39;active&#39;, idx === tabIndex);&#xA;  });&#xA;}&#xA;&lt;/script&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;callout callout-info&#34;&gt;&#xA;  &lt;div class=&#34;callout-title&#34;&gt;Specifying the &lt;code&gt;evm&lt;/code&gt; binary via &lt;code&gt;evm-bin&lt;/code&gt;&lt;/div&gt;&#xA;  &lt;div class=&#34;callout-content&#34;&gt;&#xA;    &lt;p&gt;It is possible to explicitly specify the &lt;code&gt;evm&lt;/code&gt; binary used to generate fixtures via the &lt;code&gt;--evm-bin&lt;/code&gt; flag, for example,&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/main/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/main/</guid>
      <description>&lt;h1 id=&#34;filling-tests-in-vs-code&#34;&gt;Filling Tests in VS Code&lt;/h1&gt;&#xA;&lt;p&gt;Prerequisite: &lt;a href=&#34;../getting_started/setup_vs_code.md&#34;&gt;VS Code Setup&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;exploring-test-cases&#34;&gt;Exploring Test Cases&lt;/h2&gt;&#xA;&lt;p&gt;Implemented test cases can be explored in VS Code&amp;rsquo;s &amp;ldquo;Testing&amp;rdquo; View; click on the conical flask highlighted in the screenshot below.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/filling_tests/vs_code_exploring_tests.png&#34; alt=&#34;VS Code Testing Tab&#34;&gt;&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;callout callout-info&#34;&gt;&#xA;  &lt;div class=&#34;callout-title&#34;&gt;Testing EVM Features Under Active Development&lt;/div&gt;&#xA;  &lt;div class=&#34;callout-content&#34;&gt;&#xA;    See &lt;a href=&#34;./filling_tests_dev_fork.md#vs-code-setup&#34;&gt;the VS Code section&lt;/a&gt; in &lt;a href=&#34;./filling_tests_dev_fork.md&#34;&gt;Filling Tests for Features under Development&lt;/a&gt; to explore tests targeting EVM features under development.&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;h2 id=&#34;filling-and-debugging-test-cases&#34;&gt;Filling and Debugging Test Cases&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/filling_tests/vs_code_executing_tests.png&#34; alt=&#34;VS Code Testing Tab&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/main/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/main/</guid>
      <description>&lt;h1 id=&#34;getting-started-filling-tests&#34;&gt;Getting Started: Filling Tests&lt;/h1&gt;&#xA;&lt;p&gt;This guide describes how to get started with &lt;code&gt;fill&lt;/code&gt; and commonly-used command-line options.&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Explore test cases via &lt;code&gt;--collect-only&lt;/code&gt; and search for test cases that combine &lt;code&gt;PUSH0&lt;/code&gt; and &lt;code&gt;DELEGATECALL&lt;/code&gt; in the EVM functionality introduced in the Shanghai hard fork:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uv run fill --collect-only -k &amp;#34;push0 and delegatecall&amp;#34; tests/shanghai/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;fill&lt;/code&gt; command is based on &lt;a href=&#34;https://docs.pytest.org/en/stable/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;pytest&lt;/code&gt;&lt;/a&gt;. The above command uses the &lt;a href=&#34;https://docs.pytest.org/en/stable/how-to/usage.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;optional pytest arguments&lt;/a&gt;:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;--collect-only&lt;/code&gt; only collect test cases; don&amp;rsquo;t execute them.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;-k &amp;lt;expression&amp;gt;&lt;/code&gt; filter test cases by their test case ID based on the given expression.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;tests/shanghai&lt;/code&gt; the directory containing the test cases (tells &lt;code&gt;fill&lt;/code&gt; to only discover test cases in this directory; default: &lt;code&gt;tests/&lt;/code&gt;).&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Expected console output:&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/main/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/main/</guid>
      <description>&lt;h1 id=&#34;an-explanation-of-test-ids-generated-by-fill&#34;&gt;An explanation of test IDs generated by &lt;code&gt;fill&lt;/code&gt;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;test-case-organization&#34;&gt;Test Case Organization&lt;/h2&gt;&#xA;&lt;p&gt;Test cases are implemented in Python &amp;ldquo;modules&amp;rdquo;, which are organized by folder, named after the fork where the feature-under-test was introduced, for example:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;tests/cancun/&lt;/code&gt; contains tests for features added in the Cancun hardfork.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;tests/prague/&lt;/code&gt; contains tests for features added in the Prague hardfork.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;test-id-generation&#34;&gt;Test ID generation&lt;/h2&gt;&#xA;&lt;p&gt;A test ID is a string, generated by the test framework, that uniquely identifies a test case. It&amp;rsquo;s format is:&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/main/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/main/</guid>
      <description>&lt;h1 id=&#34;transition-tool-support&#34;&gt;Transition Tool Support&lt;/h1&gt;&#xA;&lt;p&gt;The following transition tools are supported by the framework:&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Client&lt;/th&gt;&#xA;          &lt;th&gt;&lt;code&gt;t8n&lt;/code&gt; Tool&lt;/th&gt;&#xA;          &lt;th&gt;Tracing Support&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://github.com/ethereum/evmone&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ethereum/evmone&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;evmone-t8n&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Yes&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://github.com/ethereum/execution-specs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ethereum/execution-specs&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://github.com/petertdavies/ethereum-spec-evm-resolver&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;ethereum-spec-evm-resolver&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Yes&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://github.com/ethereumjs/ethereumjs-monorepo&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ethereumjs&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://github.com/ethereumjs/ethereumjs-monorepo/tree/master/packages/vm/test/t8n&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;ethereumjs-t8ntool.sh&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;No&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://github.com/ethereum/go-ethereum&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ethereum/go-ethereum&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://github.com/ethereum/go-ethereum/tree/master/cmd/evm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;evm t8n&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Yes&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://github.com/hyperledger/besu/tree/main/ethereum/evmtool&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;hyperledger/besu&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://github.com/hyperledger/besu/tree/main/ethereum/evmtool&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;evmtool t8n-server&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Yes&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://github.com/status-im/nimbus-eth1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;status-im/nimbus-eth1&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;https://github.com/status-im/nimbus-eth1/blob/master/tools/t8n/readme.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;t8n&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Yes&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/main/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/main/</guid>
      <description>&lt;h1 id=&#34;code-standards&#34;&gt;Code Standards&lt;/h1&gt;&#xA;&lt;p&gt;This document outlines the coding standards and practices used in the @ethereum/execution-spec-tests repository.&lt;/p&gt;&#xA;&lt;h2 id=&#34;code-and-ci-requirements&#34;&gt;Code and CI Requirements&lt;/h2&gt;&#xA;&lt;p&gt;Code pushed to @ethereum/execution-spec-tests must fulfill the following checks in &lt;a href=&#34;https://github.com/ethereum/execution-spec-tests/actions/workflows/tox_verify.yaml&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CI&lt;/a&gt;:&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Type&lt;/th&gt;&#xA;          &lt;th&gt;Tox Command&lt;/th&gt;&#xA;          &lt;th&gt;Explanation&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Lint &amp;amp; code formatting&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;uvx --with=tox-uv tox -e lint&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Python lint, format and module import check via &lt;code&gt;ruff&lt;/code&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Typecheck&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;uvx --with=tox-uv tox -e typecheck&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Objects that provide typehints pass type-checking via &lt;code&gt;mypy&lt;/code&gt;.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Framework unit tests&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;uvx --with=tox-uv tox -e pytest&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;All framework unit tests must execute correctly.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;EL Client test cases&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;uvx --with=tox-uv tox -e tests-deployed&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;All client test cases for deployed forks can be generated.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Benchmark EL Test cases&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;uvx --with=tox-uv tox -e tests-deployed-benchmark&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;All client test cases specific to benchmarks for deployed forks can be generated.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;HTML doc build&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;uvx --with=tox-uv tox -e mkdocs&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Documentation generated without warnings.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Spellcheck&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;uvx --with=tox-uv tox -e spellcheck&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Code and documentation spell-check using codespell.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Markdown lint&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;uvx --with=tox-uv tox -e markdownlint&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Markdown lint (requires &lt;a href=&#34;code_standards_details.md#additional-dependencies&#34;&gt;additional dependency&lt;/a&gt;).&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Changelog validation&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;uvx --with=tox-uv tox -e changelog&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Validates changelog entries format and structure in &lt;code&gt;docs/CHANGELOG.md&lt;/code&gt;.&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;callout callout-warning&#34;&gt;&#xA;  &lt;div class=&#34;callout-title&#34;&gt;Avoid CI surprises - Use pre-commit hooks!&lt;/div&gt;&#xA;  &lt;div class=&#34;callout-content&#34;&gt;&#xA;    &lt;p&gt;&lt;strong&gt;We strongly encourage all contributors to install and use pre-commit hooks!&lt;/strong&gt; This will run fast checks (lint, typecheck, spellcheck) automatically before each commit, helping you catch issues early and avoid frustrating CI failures after pushing your changes.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/main/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/main/</guid>
      <description>&lt;h1 id=&#34;detailed-code-standards&#34;&gt;Detailed Code Standards&lt;/h1&gt;&#xA;&lt;p&gt;This page provides in-depth information about the code standards and verification processes in @ethereum/execution-spec-tests.&lt;/p&gt;&#xA;&lt;h2 id=&#34;running-tox-environments&#34;&gt;Running Tox Environments&lt;/h2&gt;&#xA;&lt;h3 id=&#34;execution-options&#34;&gt;Execution Options&lt;/h3&gt;&#xA;&lt;p&gt;Run all &lt;code&gt;tox&lt;/code&gt; environments in parallel:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uvx --with=tox-uv tox run-parallel&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run environments sequentially with verbose output:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uvx --with=tox-uv tox -v&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;List all available environments:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uvx --with=tox-uv tox -av&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;specific-environment-commands&#34;&gt;Specific Environment Commands&lt;/h3&gt;&#xA;&lt;p&gt;Run specific environments using the &lt;code&gt;-e&lt;/code&gt; flag:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uvx --with=tox-uv tox -e lint,typecheck,spellcheck&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;for-test-case-changes-tests&#34;&gt;For Test Case Changes (&lt;code&gt;./tests/&lt;/code&gt;)&lt;/h4&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uvx --with=tox-uv tox -e lint,typecheck,spellcheck,tests-deployed&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;for-framework-and-library-changes-src&#34;&gt;For Framework and Library Changes (&lt;code&gt;./src/&lt;/code&gt;)&lt;/h4&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uvx --with=tox-uv tox -e lint,typecheck,spellcheck,pytest&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;for-documentation-changes-docs&#34;&gt;For Documentation Changes (&lt;code&gt;./docs/&lt;/code&gt;)&lt;/h4&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uvx --with=tox-uv tox -e spellcheck,markdownlint,mkdocs,changelog&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;&#xA;&lt;div class=&#34;callout callout-info&#34;&gt;&#xA;  &lt;div class=&#34;callout-title&#34;&gt;Tox Virtual Environment&lt;/div&gt;&#xA;  &lt;div class=&#34;callout-content&#34;&gt;&#xA;    Checks performed by &lt;code&gt;tox&lt;/code&gt; are sandboxed in their own virtual environments (created automatically in the &lt;code&gt;.tox/&lt;/code&gt; subdirectory). These can be used to debug errors encountered during &lt;code&gt;tox&lt;/code&gt; execution.&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;h3 id=&#34;additional-dependencies&#34;&gt;Additional Dependencies&lt;/h3&gt;&#xA;&lt;p&gt;Some checks require external (non-Python) packages:&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/main/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/main/</guid>
      <description>&lt;h1 id=&#34;getting-help&#34;&gt;Getting Help&lt;/h1&gt;&#xA;&lt;p&gt;The tests in this repository are a community effort to help improve the development cycle of all Ethereum execution clients.&lt;/p&gt;&#xA;&lt;p&gt;We encourage contributions and recognize that Python is not everyone&amp;rsquo;s  primary language - if you stumble over issues or need help, please reach out to one of the execution-spec-tests maintainers either directly or in the &lt;code&gt;#el-testing&lt;/code&gt; channel in the &lt;a href=&#34;https://discord.com/invite/qGpsxSA&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ethereum R&amp;amp;D Discord Server&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;contact-the-maintainers&#34;&gt;Contact the Maintainers&lt;/h2&gt;&#xA;&lt;p&gt;Write to:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Dan on &lt;a href=&#34;https://discordapp.com/users/danceratopz&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Discord&lt;/a&gt; or &lt;a href=&#34;https://t.me/danceratopz&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Telegram&lt;/a&gt; (&lt;code&gt;danceratopz&lt;/code&gt;).&lt;/li&gt;&#xA;&lt;li&gt;Spencer on &lt;a href=&#34;https://discordapp.com/users/spencertaylorbrown&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Discord&lt;/a&gt; or &lt;a href=&#34;https://t.me/spencertb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Telegram&lt;/a&gt; (&lt;code&gt;spencertaylorbrown&lt;/code&gt;/&lt;code&gt;@techbro_ccoli&lt;/code&gt;).&lt;/li&gt;&#xA;&lt;li&gt;Mario on &lt;a href=&#34;https://discordapp.com/users/marioevz&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Discord&lt;/a&gt; or &lt;a href=&#34;https://t.me/marioevz&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Telegram&lt;/a&gt; (&lt;code&gt;marioevz&lt;/code&gt;/&lt;code&gt;@marioevz&lt;/code&gt;).&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;figure markdown&gt;  &lt;!-- markdownlint-disable MD033 (MD033=no-inline-html) --&gt;&#xA;  ![ukiyo-e style design of 3 furry happy pandas playfully doing experiments on ethereum in a laboratory](img/testing_pandas.png){width=&#34;400&#34;}&#xA;&lt;/figure&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/main/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/main/</guid>
      <description>&lt;h1 id=&#34;installation-troubleshooting&#34;&gt;Installation Troubleshooting&lt;/h1&gt;&#xA;&lt;p&gt;This page provides guidance on how to troubleshoot common issues that may arise when installing &lt;a href=&#34;https://github.com/ethereum/execution-spec-tests&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ethereum/execution-spec-tests&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;problem-failed-building-wheel-for-coincurve&#34;&gt;Problem: &lt;code&gt;Failed building wheel for coincurve&lt;/code&gt;&lt;/h2&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;callout callout-danger&#34;&gt;&#xA;  &lt;div class=&#34;callout-title&#34;&gt;Problem: &lt;code&gt;Failed building wheel for coincurve&lt;/code&gt;&lt;/div&gt;&#xA;  &lt;div class=&#34;callout-content&#34;&gt;&#xA;    &lt;p&gt;Installing EEST and its dependencies via &lt;code&gt;uv sync --all-extras&lt;/code&gt; fails with:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Stored in directory: /tmp/...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Building wheel &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; coincurve &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;pyproject.toml&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; ... error&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    error: subprocess-exited-with-error&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    × Building wheel &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; coincurve &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;pyproject.toml&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; did not run successfully.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    │ exit code: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ╰─&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt; lines of output&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;571&lt;/span&gt; | &lt;span style=&#34;color:#75715e&#34;&gt;#include &amp;lt;secp256k1_extrakeys.h&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            |          ^~~~~~~~~~~~~~~~~~~~~~~&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        compilation terminated.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        error: command &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/usr/bin/gcc&amp;#39;&lt;/span&gt; failed with exit code &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;end of output&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    note: This error originates from a subprocess, and is likely not a problem with pip.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ERROR: Failed building wheel &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; coincurve&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;callout callout-success&#34;&gt;&#xA;  &lt;div class=&#34;callout-title&#34;&gt;Solution: Install the &lt;code&gt;libsecp256k1&lt;/code&gt; library&lt;/div&gt;&#xA;  &lt;div class=&#34;callout-content&#34;&gt;&#xA;    &lt;p&gt;On Ubuntu, you can install this library with:&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/main/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/main/</guid>
      <description>&lt;!-- markdownlint-disable MD001 (MD001=heading-increment due to #### usage below) --&gt;&#xA;&lt;h1 id=&#34;repository-overview&#34;&gt;Repository Overview&lt;/h1&gt;&#xA;&lt;p&gt;The most relevant folders and files in the repo are:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;📁 execution-test-specs/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├─╴📁 tests/                     # test cases&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   ├── 📁 eips/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   ├── 📁 vm/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   └── 📁 ...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├─╴📁 fixtures/                  # default fixture output dir&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   ├── 📁 blockchain_tests/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   ├── 📁 blockchain_tests_engine/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   ├── 📁 state_tests/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   └── 📁 ...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├─╴📁 src/                       # library &amp;amp; framework packages&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   ├── 📁 ethereum_test_fork/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   ├── 📁 ethereum_test_tools/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   └── 📁 ...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├─╴📁 docs/                      # markdown documentation&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   ├── 📁 getting_started&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   ├── 📁 dev&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   └── 📁 ...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├─╴📁 .vscode/                   # visual studio code config&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   ├── 📄 settings.recommended.json # copy to settings.json&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   ├── 📄 launch.recommended.json&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   └── 📄 extensions.json&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;└── 📄 whitelist.txt             # spellcheck dictionary&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;tests&#34;&gt;&lt;code&gt;tests/&lt;/code&gt;&lt;/h4&gt;&#xA;&lt;p&gt;Contains the implementation of the Ethereum consensus tests available in this repository.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/main/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/main/</guid>
      <description>&lt;h1 id=&#34;vs-code-setup&#34;&gt;VS Code Setup&lt;/h1&gt;&#xA;&lt;p&gt;VS Code setup is optional, but does offer the following advantages:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Auto-format your Python code to conform to the repository&amp;rsquo;s &lt;a href=&#34;../writing_tests/code_standards.md&#34;&gt;code standards&lt;/a&gt; (&lt;a href=&#34;https://docs.astral.sh/ruff/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ruff&lt;/a&gt;).&lt;/li&gt;&#xA;&lt;li&gt;Inline linting and auto-completion (thanks to Python type hints).&lt;/li&gt;&#xA;&lt;li&gt;Spell-check your code and docs.&lt;/li&gt;&#xA;&lt;li&gt;Graphical exploration of test cases and easy test execution/debug.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;&#xA;&lt;p&gt;Please refer to the &lt;a href=&#34;https://code.visualstudio.com/docs/setup/setup-overview&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Visual Studio Code docs&lt;/a&gt; for help with installation.&lt;/p&gt;&#xA;&lt;h2 id=&#34;vs-code-settings-file&#34;&gt;VS Code Settings file&lt;/h2&gt;&#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/ethereum/execution-spec-tests&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ethereum/execution-spec-tests&lt;/a&gt; repo includes configuration files for VS Code in the &lt;code&gt;.vscode/&lt;/code&gt; sub-directory:&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/main/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/main/</guid>
      <description>&lt;!-- markdownlint-disable MD007 MD041 (MD007=ul-indent MD041=first-line-heading) --&gt;&#xA;&lt;!-- Contributing and Security: included via mkdocs-gen-files and docs/include_contributing.py --&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;main.md&#34;&gt;Home&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;Getting Started&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;getting_started/main.md&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;getting_started/installation_troubleshooting.md&#34;&gt;Installation Troubleshooting&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;getting_started/contributing.md&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;getting_started/security.md&#34;&gt;Security Policy&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;getting_started/code_standards.md&#34;&gt;Code Standards&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;getting_started/code_standards_details.md&#34;&gt;Detailed Code Standards&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;getting_started/setup_vs_code.md&#34;&gt;VS Code Setup&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;getting_started/repository_overview.md&#34;&gt;Repository Overview&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;getting_started/getting_help.md&#34;&gt;Getting Help&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;writing_tests/main.md&#34;&gt;Writing Tests&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;writing_tests/adding_a_new_test.md&#34;&gt;Adding a New Test&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;writing_tests/types_of_tests.md&#34;&gt;Types of Test&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;writing_tests/writing_a_new_test.md&#34;&gt;Writing a New Test&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;writing_tests/test_markers.md&#34;&gt;Test Markers&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;writing_tests/verifying_changes.md&#34;&gt;Verifying Changes Locally&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;writing_tests/code_standards.md&#34;&gt;Code Standards&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;writing_tests/exception_tests.md&#34;&gt;Exception Tests&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;writing_tests/fork_methods.md&#34;&gt;Using and Extending Fork Methods&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;writing_tests/reference_specification.md&#34;&gt;Referencing an EIP Spec Version&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;writing_tests/eip_checklist.md&#34;&gt;EIP Checklist Generation&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;writing_tests/checklist_templates/main.md&#34;&gt;Testing Checklist Templates&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;writing_tests/checklist_templates/eip_testing_checklist_template.md&#34;&gt;EIP Execution Layer Testing Checklist Template&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;writing_tests/post_mortems.md&#34;&gt;Post-mortems&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;writing_tests/tutorials/state_transition.md&#34;&gt;Tutorial: Adding a State Test&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;writing_tests/porting_legacy_tests.md&#34;&gt;Porting Legacy Tests&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;filling_tests/main.md&#34;&gt;Filling Tests&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;filling_tests/getting_started.md&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;filling_tests/filling_tests_command_line.md&#34;&gt;Filling Tests at a Prompt&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;filling_tests/filling_tests_command_line_options.md&#34;&gt;Fill Command-Line Options&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;filling_tests/filling_tests_vs_code.md&#34;&gt;Filling Tests in VS Code&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;filling_tests/filling_tests_dev_fork.md&#34;&gt;Filling Tests for Features Under Development&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;filling_tests/test_ids.md&#34;&gt;An Explanation of Test IDs&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;filling_tests/transition_tool_support.md&#34;&gt;Transition Tool Support&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;filling_tests/debugging_t8n_tools.md&#34;&gt;Debugging Transition Tools&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;running_tests/main.md&#34;&gt;Running Tests&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;running_tests/running.md&#34;&gt;Methods of Running Tests&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;running_tests/releases.md&#34;&gt;EEST Fixture Releases&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;running_tests/test_formats/main.md&#34;&gt;Test Fixture Specifications&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;running_tests/test_formats/state_test.md&#34;&gt;State Tests&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;running_tests/test_formats/blockchain_test.md&#34;&gt;Blockchain Tests&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;running_tests/test_formats/blockchain_test_engine.md&#34;&gt;Blockchain Engine Tests&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;running_tests/test_formats/blockchain_test_engine_x.md&#34;&gt;Blockchain Engine X Tests&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;running_tests/test_formats/transaction_test.md&#34;&gt;Transaction Tests&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;running_tests/test_formats/common_types.md&#34;&gt;Common Types&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;running_tests/test_formats/exceptions.md&#34;&gt;Exceptions&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;running_tests/hive/main.md&#34;&gt;Hive&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;running_tests/hive/client_config.md&#34;&gt;Client Configuration&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;running_tests/hive/common_options.md&#34;&gt;Common Options&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;running_tests/hive/dev_mode.md&#34;&gt;Development Mode&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;running_tests/hive/hiveview.md&#34;&gt;Viewing Results&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;running_tests/hive/ci_integration.md&#34;&gt;CI Integration&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;running_tests/consume/main.md&#34;&gt;Consume Commands&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;running_tests/consume/cache.md&#34;&gt;Consume Cache &amp;amp; Fixture Inputs&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;running_tests/consume/direct.md&#34;&gt;Consume Direct&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;running_tests/consume/simulators.md&#34;&gt;Consume Simulators&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;running_tests/consume/exceptions.md&#34;&gt;Exception Tests&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;./running_tests/execute/main.md&#34;&gt;Execute Commands&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;./running_tests/execute/hive.md&#34;&gt;Execute Hive&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;./running_tests/execute/remote.md&#34;&gt;Execute Remote&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;running_tests/useful_pytest_options.md&#34;&gt;Useful Pytest Options&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;dev/main.md&#34;&gt;Developer Doc&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;dev/configurations.md&#34;&gt;Managing Configurations&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;dev/interactive_usage.md&#34;&gt;Interactive Library Usage&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;dev/docs.md&#34;&gt;Generating Documentation&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;dev/documenting_clis.md&#34;&gt;Documenting CLI Commands&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;dev/coding_style.md&#34;&gt;Coding Style&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;dev/logging.md&#34;&gt;Logging&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;dev/precommit.md&#34;&gt;Enabling Precommit Checks&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;dev/test_actions_locally.md&#34;&gt;Running Github Actions Locally&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;CHANGELOG.md&#34;&gt;Changelog&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;library/main.md&#34;&gt;Library Reference&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;library/cli/main.md&#34;&gt;EEST CLI Tools&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;library/ethereum_test_base_types.md&#34;&gt;Ethereum Test Base Types Package&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;library/ethereum_test_exceptions.md&#34;&gt;Ethereum Test Exceptions Package&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;library/ethereum_test_fixtures.md&#34;&gt;Ethereum Test Fixtures Package&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;library/ethereum_test_forks.md&#34;&gt;Ethereum Test Forks Package&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;library/ethereum_test_specs.md&#34;&gt;Ethereum Test Specs Package&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;library/ethereum_test_tools.md&#34;&gt;Ethereum Test Tools Package&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;library/ethereum_test_types.md&#34;&gt;Ethereum Test Types Package&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;library/ethereum_test_vm.md&#34;&gt;Ethereum Test VM Package&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;library/ethereum_clis.md&#34;&gt;Ethereum CLIs Package&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;library/pytest_plugins/main.md&#34;&gt;Pytest Plugins&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/main/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/main/</guid>
      <description>&lt;h1 id=&#34;consume-cache-and-fixture-inputs&#34;&gt;Consume Cache and Fixture Inputs&lt;/h1&gt;&#xA;&lt;p&gt;The &lt;code&gt;consume cache&lt;/code&gt; command can be used to resolve, download and cache fixture releases:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;consume cache --input=stable@v4.5.0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;All &lt;code&gt;consume&lt;/code&gt; subcommands have an &lt;code&gt;--input&lt;/code&gt; argument, which implements the same functionality as &lt;code&gt;consume cache&lt;/code&gt; to download and cache fixtures, respectively obtain downloaded fixtures from the cache.&lt;/p&gt;&#xA;&lt;h2 id=&#34;example-two-liner-to-download-the-latest-fixture-release&#34;&gt;Example: Two-liner to Download the Latest Fixture Release&lt;/h2&gt;&#xA;&lt;p&gt;Releases can be downloaded using EEST tooling without (manually) cloning and installing the @ethereum/execution-spec-tests tools as following:&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/main/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/main/</guid>
      <description>&lt;h1 id=&#34;the-consume-direct-command&#34;&gt;The &lt;code&gt;consume direct&lt;/code&gt; Command&lt;/h1&gt;&#xA;&lt;p&gt;The &lt;code&gt;direct&lt;/code&gt; method provides the fastest way to test EVM functionality by executing tests directly through a client&amp;rsquo;s dedicated test interface (e.g. &lt;a href=&#34;https://github.com/ethereum/go-ethereum/blob/4bb097b7ffc32256791e55ff16ca50ef83c4609b/cmd/evm/staterunner.go&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;statetest&lt;/code&gt;&lt;/a&gt; or &lt;a href=&#34;https://github.com/ethereum/go-ethereum/blob/35dd84ce2999ecf5ca8ace50a4d1a6abc231c370/cmd/evm/blockrunner.go&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;blocktest&lt;/code&gt;&lt;/a&gt;).&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uv run consume direct --bin&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;evm-binary&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;OPTIONS&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;--bin EVM_BIN&lt;/code&gt;: Path to an evm executable that can process &lt;code&gt;StateTestFixture&lt;/code&gt; and/or &lt;code&gt;BlockTestFixture&lt;/code&gt; formats.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;--traces&lt;/code&gt;: Collect execution traces from the evm executable.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;callout callout-warning&#34;&gt;&#xA;  &lt;div class=&#34;callout-title&#34;&gt;Limited Client Support&lt;/div&gt;&#xA;  &lt;div class=&#34;callout-content&#34;&gt;&#xA;    &lt;p&gt;Currently, only the following clients can be used with &lt;code&gt;consume direct&lt;/code&gt;:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;go-ethereum &lt;code&gt;statetest&lt;/code&gt; and &lt;code&gt;blocktest&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;li&gt;Nethermind &lt;code&gt;nethtest&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;h2 id=&#34;advantages&#34;&gt;Advantages&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Speed&lt;/strong&gt;: Fastest test execution method.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Simplicity&lt;/strong&gt;: No container or network overhead.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Debugging&lt;/strong&gt;: Easy access to traces and logs.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;limitations&#34;&gt;Limitations&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Limited client support&lt;/strong&gt;: Only go-ethereum and Nethermind.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Module scope&lt;/strong&gt;: Tests EVM, respectively block import, in isolation, not full client behavior.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Interface dependency&lt;/strong&gt;: Requires client-specific test interfaces.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;example-usage&#34;&gt;Example Usage&lt;/h2&gt;&#xA;&lt;p&gt;Only run state tests (by using a mark filter, &lt;code&gt;-m&lt;/code&gt;) from a local &lt;code&gt;fixtures&lt;/code&gt; folder with go-ethereum:&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/main/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/main/</guid>
      <description>&lt;h1 id=&#34;exception-tests&#34;&gt;Exception Tests&lt;/h1&gt;&#xA;&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;&#xA;&lt;p&gt;Exception tests validate that clients correctly reject invalid blocks and transactions with appropriate error messages. The Engine simulator provides advanced exception verification using client-specific mappers to handle varying error message formats across different clients.&lt;/p&gt;&#xA;&lt;h2 id=&#34;how-exception-testing-works&#34;&gt;How Exception Testing Works&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;Test fixtures specify expected exceptions&lt;/strong&gt; - Each test defines what error should occur&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Clients reject invalid payloads&lt;/strong&gt; - Via Engine API or block import&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Exception mappers translate errors&lt;/strong&gt; - Client-specific error messages are normalized&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Test framework validates&lt;/strong&gt; - Ensures the correct exception type was raised&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;client-exception-mappers&#34;&gt;Client Exception Mappers&lt;/h2&gt;&#xA;&lt;p&gt;Each client has unique error message formats. EEST maintains exception mappers that translate client-specific errors to standardized exception types.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/main/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/main/</guid>
      <description>&lt;h1 id=&#34;consume-simulators&#34;&gt;Consume Simulators&lt;/h1&gt;&#xA;&lt;p&gt;The &lt;code&gt;engine&lt;/code&gt; and &lt;code&gt;rlp&lt;/code&gt; simulators test clients by importing blocks through different interfaces. These simulators run within the Hive testing framework to provide containerized, isolated testing environments.&lt;/p&gt;&#xA;&lt;h2 id=&#34;command-syntax&#34;&gt;Command Syntax&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uv run consume &amp;lt;engine|rlp&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;OPTIONS&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;relevant-information&#34;&gt;Relevant Information&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;To install the &lt;code&gt;consume&lt;/code&gt; command, see &lt;a href=&#34;../../getting_started/main.md&#34;&gt;Installation&lt;/a&gt;.&lt;/li&gt;&#xA;&lt;li&gt;Help &lt;a href=&#34;../hive/main.md&#34;&gt;setting up&lt;/a&gt; and &lt;a href=&#34;../hive/dev_mode.md&#34;&gt;starting Hive in dev mode&lt;/a&gt;.&lt;/li&gt;&#xA;&lt;li&gt;For an explanation of how the &lt;code&gt;consume&lt;/code&gt; simulators work, see the &lt;a href=&#34;../running.md#engine&#34;&gt;Engine&lt;/a&gt; and &lt;a href=&#34;../running.md#rlp&#34;&gt;RLP&lt;/a&gt; sections in &lt;a href=&#34;../running.md&#34;&gt;Running Tests&lt;/a&gt;.&lt;/li&gt;&#xA;&lt;li&gt;Help for relevant options can be found in &lt;a href=&#34;./cache.md&#34;&gt;Consume Cache and Fixture Inputs&lt;/a&gt; and &lt;a href=&#34;../useful_pytest_options.md&#34;&gt;Useful Pytest Options&lt;/a&gt;.&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/main/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/main/</guid>
      <description>&lt;h1 id=&#34;executing-tests-on-a-hive-local-network&#34;&gt;Executing Tests on a Hive Local Network&lt;/h1&gt;&#xA;&lt;p&gt;Tests can be executed on a local hive-controlled single-client network by running the &lt;code&gt;execute hive&lt;/code&gt; command.&lt;/p&gt;&#xA;&lt;h2 id=&#34;the-eestexecute-blobs-simulator&#34;&gt;The &lt;code&gt;eest/execute-blobs&lt;/code&gt; Simulator&lt;/h2&gt;&#xA;&lt;p&gt;The &lt;code&gt;blob_transaction_test&lt;/code&gt; execute test spec sends blob transactions to a running client in order to verify its &lt;code&gt;engine_getBlobsVX&lt;/code&gt; endpoint behavior. These tests can be run using:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./hive --client besu --client-file ./configs/osaka.yaml --sim ethereum/eest/execute-blobs&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;See &lt;a href=&#34;../hive/main.md&#34;&gt;Hive&lt;/a&gt; for help installing and configuring Hive.&lt;/p&gt;&#xA;&lt;h2 id=&#34;running-execute-tests-with-hive-in-dev-mode&#34;&gt;Running &lt;code&gt;execute&lt;/code&gt; tests with Hive in Dev Mode&lt;/h2&gt;&#xA;&lt;p&gt;This command requires hive to be running in &lt;code&gt;--dev&lt;/code&gt; mode:&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/main/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/main/</guid>
      <description>&lt;h1 id=&#34;running-test-on-a-live-remote-network&#34;&gt;Running Test on a Live Remote Network&lt;/h1&gt;&#xA;&lt;p&gt;Tests can be executed on a live remote network by running the &lt;code&gt;execute remote&lt;/code&gt; command.&lt;/p&gt;&#xA;&lt;p&gt;The command requires the &lt;code&gt;--fork&lt;/code&gt; flag which must match the fork that is currently active in the network (fork transition tests are not supported yet).&lt;/p&gt;&#xA;&lt;p&gt;The &lt;code&gt;execute remote&lt;/code&gt; command requires to be pointed to an RPC endpoint of a client that is connected to the network, which can be specified by using the &lt;code&gt;--rpc-endpoint&lt;/code&gt; flag:&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/main/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/main/</guid>
      <description>&lt;h1 id=&#34;continuous-integration-and-automated-testing&#34;&gt;Continuous Integration and Automated Testing&lt;/h1&gt;&#xA;&lt;p&gt;The Ethereum Foundation maintains continuous testing infrastructure:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Production results&lt;/strong&gt;: &lt;a href=&#34;https://hive.ethpandaops.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;hive.ethpandaops.io&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;GitHub Actions&lt;/strong&gt;: &lt;a href=&#34;https://github.com/ethpandaops/hive-github-action&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ethpandaops/hive-github-action&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/main/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/main/</guid>
      <description>&lt;h1 id=&#34;client-configuration-guide&#34;&gt;Client Configuration Guide&lt;/h1&gt;&#xA;&lt;p&gt;Clients ran in Hive are configured via the following &lt;code&gt;./hive&lt;/code&gt; options:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;code&gt;--client-file=client_config.yaml&lt;/code&gt;: Specifies a YAML file defining which and how clients are built.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;--client=client1,client2&lt;/code&gt;: Selects a subset of clients to run from the YAML via &lt;code&gt;nametag&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;client-yaml-file-format&#34;&gt;Client YAML File Format&lt;/h2&gt;&#xA;&lt;p&gt;Multiple client configurations can be defined as a list in a client YAML file with the following structure:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- &lt;span style=&#34;color:#f92672&#34;&gt;client&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;&amp;lt;client-name-1&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;nametag&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;&amp;lt;unique-identifier&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;dockerfile&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;&amp;lt;dockerfile-variant&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;build_args&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;&amp;lt;value&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ae81ff&#34;&gt;...&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- &lt;span style=&#34;color:#f92672&#34;&gt;client&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;&amp;lt;client-name-2&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;...&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;client-build-variants&#34;&gt;Client Build Variants&lt;/h2&gt;&#xA;&lt;p&gt;Hive runs client images in Docker containers. There are three different ways to specify how a client image should be built:&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/main/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/main/</guid>
      <description>&lt;h1 id=&#34;common-simulator-options&#34;&gt;Common Simulator Options&lt;/h1&gt;&#xA;&lt;p&gt;All EEST Hive simulators share common command-line options and patterns.&lt;/p&gt;&#xA;&lt;h2 id=&#34;basic-usage&#34;&gt;Basic Usage&lt;/h2&gt;&#xA;&lt;p&gt;While they may be omitted, it&amp;rsquo;s recommended to specify the &lt;code&gt;fixtures&lt;/code&gt; and &lt;code&gt;branch&lt;/code&gt; simulator build arguments when running EEST simulators.&lt;/p&gt;&#xA;&lt;p&gt;For example, this runs &amp;ldquo;stable&amp;rdquo; fixtures from the v4.3.0 &lt;a href=&#34;../releases.md#standard-releases&#34;&gt;latest stable release&lt;/a&gt; and builds the simulator at the v4.3.0 tag:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./hive --sim ethereum/eest/consume-engine &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --sim.buildarg fixtures&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;stable@v4.3.0 &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --sim.buildarg branch&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;v4.3.0 &lt;span style=&#34;color:#ae81ff&#34;&gt;\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --client go-ethereum&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;test-selection&#34;&gt;Test Selection&lt;/h2&gt;&#xA;&lt;p&gt;Run a subset of tests by filtering tests using &lt;code&gt;--sim.limit=&amp;lt;regex&amp;gt;&lt;/code&gt; to perform a regular expression match against test IDs:&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/main/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/main/</guid>
      <description>&lt;h1 id=&#34;hive-development-mode&#34;&gt;Hive Development Mode&lt;/h1&gt;&#xA;&lt;p&gt;This section explains how to run EEST simulators using their EEST commands, e.g., &lt;code&gt;uv run consume engine&lt;/code&gt;, against a Hive &amp;ldquo;development&amp;rdquo; server as apposed to using the standalone &lt;code&gt;./hive&lt;/code&gt; command.&lt;/p&gt;&#xA;&lt;p&gt;This avoids running the simulator in a dockerized environment and has several advantages:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;A local directory containing fixtures can be specified (&lt;code&gt;--input=./fixtures/&lt;/code&gt;).&lt;/li&gt;&#xA;&lt;li&gt;Allows dropping into a Python debugger (via &lt;code&gt;--pdb&lt;/code&gt;) upon test failure to inspect the response or ssh to the client container.&lt;/li&gt;&#xA;&lt;li&gt;Provides access to a larger set of the simulator&amp;rsquo;s command-line options,&lt;/li&gt;&#xA;&lt;li&gt;Runs are faster; there are no docker image rebuilds in between runs. In particular, modifications to the simulator do not require a an image rebuild.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;platform-support&#34;&gt;Platform Support&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Linux: Direct development mode supported.&lt;/li&gt;&#xA;&lt;li&gt;macOS: Must be ran from a Linux environment or use a Docker-based workaround (see macOS Setup).&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;quick-start&#34;&gt;Quick Start&lt;/h2&gt;&#xA;&lt;h3 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;EEST is installed, see &lt;a href=&#34;../../getting_started/main.md&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;Hive is built, see &lt;a href=&#34;../hive/main.md#quick-start&#34;&gt;Hive&lt;/a&gt;.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;hive-dev-setup-on-linux&#34;&gt;Hive Dev Setup on Linux&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Start Hive in development mode, e.g.:&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/main/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/main/</guid>
      <description>&lt;h1 id=&#34;viewing-results&#34;&gt;Viewing Results&lt;/h1&gt;&#xA;&lt;p&gt;Build the result viewer &lt;code&gt;hiveview&lt;/code&gt;:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;go build ./cmd/hiveview&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Start the server:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./hiveview --serve&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/main/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/main/</guid>
      <description>&lt;h1 id=&#34;eest-fixture-releases&#34;&gt;EEST Fixture Releases&lt;/h1&gt;&#xA;&lt;h2 id=&#34;formats-and-release-layout&#34;&gt;Formats and Release Layout&lt;/h2&gt;&#xA;&lt;p&gt;@ethereum/execution-spec-tests releases contain JSON test fixtures in various formats. Note that transaction type tests are executed directly from Python source using the &lt;a href=&#34;./execute/main.md&#34;&gt;&lt;code&gt;execute&lt;/code&gt;&lt;/a&gt; command.&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Format&lt;/th&gt;&#xA;          &lt;th&gt;Consumed by the client&lt;/th&gt;&#xA;          &lt;th&gt;Location in &lt;code&gt;.tar.gz&lt;/code&gt; release&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;./test_formats/state_test.md&#34;&gt;State Tests&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;- directly via a &lt;code&gt;statetest&lt;/code&gt;-like command&lt;br/&gt; (e.g., &lt;a href=&#34;https://github.com/ethereum/go-ethereum/blob/4bb097b7ffc32256791e55ff16ca50ef83c4609b/cmd/evm/staterunner.go&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;go-ethereum/cmd/evm/staterunner.go&lt;/a&gt;)&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;./fixtures/state_tests/&lt;/code&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;./test_formats/blockchain_test.md&#34;&gt;Blockchain Tests&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;- directly via a &lt;code&gt;blocktest&lt;/code&gt;-like command&lt;br/&gt; (e.g., &lt;a href=&#34;https://github.com/ethereum/go-ethereum/blob/4bb097b7ffc32256791e55ff16ca50ef83c4609b/cmd/evm/blockrunner.go&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;go-ethereum/cmd/evm/blockrunner.go&lt;/a&gt;)&lt;/br&gt;- using the &lt;a href=&#34;./running.md#rlp&#34;&gt;RLPeest/consume-rlp Simulator&lt;/a&gt; via block import&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;./fixtures/blockchain_tests/&lt;/code&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;./test_formats/blockchain_test_engine.md&#34;&gt;Blockchain Engine Tests&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;- using the &lt;a href=&#34;./running.md#engine&#34;&gt;eest/consume-engine Simulator&lt;/a&gt; and the Engine API&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;./fixtures/blockchain_tests_engine/&lt;/code&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;a href=&#34;./test_formats/transaction_test.md&#34;&gt;Transaction Tests&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;- using a new simulator coming soon&lt;/td&gt;&#xA;          &lt;td&gt;None; executed directly from Python source,&lt;/br&gt;using a release tag&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Blob Transaction Tests&lt;/td&gt;&#xA;          &lt;td&gt;- using the &lt;a href=&#34;./execute/hive.md#the-eestexecute-blobs-simulator&#34;&gt;eest/execute-blobs Simulator&lt;/a&gt; and&lt;/td&gt;&#xA;          &lt;td&gt;None; executed directly from Python source,&lt;/br&gt;using a release tag&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h2 id=&#34;release-urls-and-tarballs&#34;&gt;Release URLs and Tarballs&lt;/h2&gt;&#xA;&lt;h3 id=&#34;versioning-scheme&#34;&gt;Versioning Scheme&lt;/h3&gt;&#xA;&lt;p&gt;EEST framework and test sources and fixture releases are tagged use a semantic versioning scheme, &lt;code&gt;&amp;lt;optional:&amp;lt;pre_release_name@&amp;gt;&amp;gt;v&amp;lt;MAJOR&amp;gt;.&amp;lt;MINOR&amp;gt;.&amp;lt;PATCH&amp;gt;&lt;/code&gt; as following:&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/main/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/main/</guid>
      <description>&lt;h1 id=&#34;methods-of-running-tests&#34;&gt;Methods of Running Tests&lt;/h1&gt;&#xA;&lt;p&gt;EEST has two commands, &lt;code&gt;consume&lt;/code&gt; and &lt;code&gt;execute&lt;/code&gt;, that run test cases against EL clients:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;code&gt;consume&lt;/code&gt; runs JSON test fixtures against a client - the client is said to &amp;ldquo;consume&amp;rdquo; the test case fixture.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;execute&lt;/code&gt; runs test cases from Python source against a client - the test case is &amp;ldquo;executed&amp;rdquo; against the client.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;top-level-comparison&#34;&gt;Top-Level Comparison&lt;/h2&gt;&#xA;&lt;p&gt;Both &lt;code&gt;consume&lt;/code&gt; and &lt;code&gt;execute&lt;/code&gt; provide sub-commands which correspond to different methods of testing EL clients using EEST test cases:&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/main/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/main/</guid>
      <description>&lt;h1 id=&#34;blockchain-tests&#34;&gt;Blockchain Tests  &lt;!-- markdownlint-disable MD051 (MD051=link-fragments &#34;Link fragments should be valid&#34;) --&gt;&lt;/h1&gt;&#xA;&lt;p&gt;The Blockchain Test fixture format tests are included in the fixtures subdirectory &lt;code&gt;blockchain_tests&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;These are produced by the &lt;code&gt;StateTest&lt;/code&gt; and &lt;code&gt;BlockchainTest&lt;/code&gt; test specs.&lt;/p&gt;&#xA;&lt;h2 id=&#34;description&#34;&gt;Description&lt;/h2&gt;&#xA;&lt;p&gt;The blockchain test fixture format is used to test block validation and the consensus rules of the Ethereum blockchain.&lt;/p&gt;&#xA;&lt;p&gt;It does so by defining a pre-execution state, a series of blocks, and a post-execution state, verifying that, after all the blocks have been processed, appended if valid or rejected if invalid, the result is the expected post-execution state.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/main/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/main/</guid>
      <description>&lt;h1 id=&#34;blockchain-engine-tests&#34;&gt;Blockchain Engine Tests  &lt;!-- markdownlint-disable MD051 (MD051=link-fragments &#34;Link fragments should be valid&#34;) --&gt;&lt;/h1&gt;&#xA;&lt;p&gt;The Blockchain Engine Test fixture format tests are included in the fixtures subdirectory &lt;code&gt;blockchain_tests_engine&lt;/code&gt;, and use Engine API directives instead of the usual BlockchainTest format.&lt;/p&gt;&#xA;&lt;p&gt;These are produced by the &lt;code&gt;StateTest&lt;/code&gt; and &lt;code&gt;BlockchainTest&lt;/code&gt; test specs.&lt;/p&gt;&#xA;&lt;h2 id=&#34;description&#34;&gt;Description&lt;/h2&gt;&#xA;&lt;p&gt;The Blockchain Engine Test fixture format is used to test block validation and the consensus rules of the Ethereum blockchain, when a block is delivered through the Engine API as a &lt;code&gt;engine_newPayloadVX&lt;/code&gt; directive.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/main/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/main/</guid>
      <description>&lt;h1 id=&#34;blockchain-engine-x-tests&#34;&gt;Blockchain Engine X Tests  &lt;!-- markdownlint-disable MD051 (MD051=link-fragments &#34;Link fragments should be valid&#34;) --&gt;&lt;/h1&gt;&#xA;&lt;p&gt;The Blockchain Engine X Test fixture format tests are included in the fixtures subdirectory &lt;code&gt;blockchain_tests_engine_x&lt;/code&gt;, and use Engine API directives with optimized pre-allocation groups for improved execution performance.&lt;/p&gt;&#xA;&lt;p&gt;These are produced by the &lt;code&gt;StateTest&lt;/code&gt; and &lt;code&gt;BlockchainTest&lt;/code&gt; test specs when using the &lt;code&gt;--generate-pre-alloc-groups&lt;/code&gt; and &lt;code&gt;--use-pre-alloc-groups&lt;/code&gt; flags.&lt;/p&gt;&#xA;&lt;h2 id=&#34;description&#34;&gt;Description&lt;/h2&gt;&#xA;&lt;p&gt;The Blockchain Engine X Test fixture format is an optimized variant of the &lt;a href=&#34;./blockchain_test_engine.md&#34;&gt;Blockchain Engine Test&lt;/a&gt; format designed for large-scale test execution with performance optimizations.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/main/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/main/</guid>
      <description>&lt;h1 id=&#34;common-types&#34;&gt;Common Types&lt;/h1&gt;&#xA;&lt;h2 id=&#34;basic-types&#34;&gt;Basic Types&lt;/h2&gt;&#xA;&lt;h3 id=&#34;address&#34;&gt;&lt;code&gt;Address&lt;/code&gt;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;a href=&#34;#bytes&#34;&gt;Bytes&lt;/a&gt; of a 20-byte fixed length.&lt;/p&gt;&#xA;&lt;h3 id=&#34;bloom&#34;&gt;&lt;code&gt;Bloom&lt;/code&gt;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;a href=&#34;#bytes&#34;&gt;Bytes&lt;/a&gt; of a 256-byte fixed length.&lt;/p&gt;&#xA;&lt;h3 id=&#34;bytes&#34;&gt;&lt;code&gt;Bytes&lt;/code&gt;&lt;/h3&gt;&#xA;&lt;p&gt;Hexadecimal representation of binary data of any length encoded as a JSON string, with a &amp;ldquo;0x&amp;rdquo; prefix.&lt;/p&gt;&#xA;&lt;h3 id=&#34;emptyaddress&#34;&gt;&lt;code&gt;EmptyAddress&lt;/code&gt;&lt;/h3&gt;&#xA;&lt;p&gt;An empty JSON string &lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;, used to represent an empty address. E.g. in the &lt;code&gt;to&lt;/code&gt; field of a transaction when it is a contract creation.&lt;/p&gt;&#xA;&lt;h3 id=&#34;hash&#34;&gt;&lt;code&gt;Hash&lt;/code&gt;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;a href=&#34;#bytes&#34;&gt;Bytes&lt;/a&gt; of a 32-byte fixed length.&lt;/p&gt;&#xA;&lt;h3 id=&#34;headernonce&#34;&gt;&lt;code&gt;HeaderNonce&lt;/code&gt;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;a href=&#34;#bytes&#34;&gt;Bytes&lt;/a&gt; of a 8-byte fixed length.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/main/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/main/</guid>
      <description>&lt;h1 id=&#34;exceptions&#34;&gt;Exceptions&lt;/h1&gt;&#xA;&lt;p&gt;Exception types are represented as a JSON string in the test fixtures.&lt;/p&gt;&#xA;&lt;p&gt;The exception converted into a string is composed of the exception type name,&#xA;followed by a period, followed by the specific exception name.&lt;/p&gt;&#xA;&lt;p&gt;For example, the exception &lt;code&gt;INSUFFICIENT_ACCOUNT_FUNDS&lt;/code&gt; of type&#xA;&lt;code&gt;TransactionException&lt;/code&gt; is represented as&#xA;&lt;code&gt;&amp;quot;TransactionException.INSUFFICIENT_ACCOUNT_FUNDS&amp;quot;&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;The JSON string can contain multiple exception types, separated by the &lt;code&gt;|&lt;/code&gt;&#xA;character, denoting that the transaction or block can throw either one of&#xA;the exceptions.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/main/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/main/</guid>
      <description>&lt;h1 id=&#34;state-tests&#34;&gt;State Tests &lt;!-- markdownlint-disable MD051 (MD051=link-fragments &#34;Link fragments should be valid&#34;) --&gt;&lt;/h1&gt;&#xA;&lt;p&gt;The State Test fixture format tests are included in the fixtures subdirectory &lt;code&gt;state_tests&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;These are produced by the &lt;code&gt;StateTest&lt;/code&gt; and &lt;code&gt;StateTestOnly&lt;/code&gt; test specs.&lt;/p&gt;&#xA;&lt;h2 id=&#34;description&#34;&gt;Description&lt;/h2&gt;&#xA;&lt;p&gt;The state test fixture format is used to test the state transition function of the Ethereum Virtual Machine (EVM).&lt;/p&gt;&#xA;&lt;p&gt;It does so by defining a transaction, a pre-execution state, and a post-execution state, and verifying that the transaction execution results in the expected post-execution state.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/main/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/main/</guid>
      <description>&lt;h1 id=&#34;transaction-tests&#34;&gt;Transaction Tests &lt;!-- markdownlint-disable MD051 (MD051=link-fragments &#34;Link fragments should be valid&#34;) --&gt;&lt;/h1&gt;&#xA;&lt;p&gt;The Transaction Test fixture format tests are included in the fixtures subdirectory &lt;code&gt;transaction_tests&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;These are produced by the &lt;code&gt;TransactionTest&lt;/code&gt; test spec.&lt;/p&gt;&#xA;&lt;h2 id=&#34;description&#34;&gt;Description&lt;/h2&gt;&#xA;&lt;p&gt;The transaction test fixture format is used to test client&amp;rsquo;s transaction RLP parsing without executing the transaction on the EVM.&lt;/p&gt;&#xA;&lt;p&gt;It does so by defining a transaction binary RLP representation, and whether the transaction should be accepted or rejected by the client in each fork.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/main/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/main/</guid>
      <description>&lt;h1 id=&#34;useful-pytest-options&#34;&gt;Useful Pytest Options&lt;/h1&gt;&#xA;&lt;p&gt;The EEST commands to run tests are customizations to the pytest framework, which provides many helpful options for test selection, parallel execution, report output and debugging. This section provides the most relevant options, a full overview is available in the &lt;a href=&#34;https://docs.pytest.org/en/8.3.x/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;pytest docs&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;fixture-inputs-consume-commands&#34;&gt;Fixture Inputs (Consume Commands)&lt;/h2&gt;&#xA;&lt;p&gt;See &lt;a href=&#34;./consume/cache.md&#34;&gt;Consume Cache and Fixture Inputs&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;dry-run&#34;&gt;Dry-Run&lt;/h2&gt;&#xA;&lt;p&gt;List collected tests, &lt;code&gt;-q&lt;/code&gt; restricts output to &lt;a href=&#34;../filling_tests/test_ids.md&#34;&gt;test IDs&lt;/a&gt; only:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uv run consume engine --input&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;lt;fixture_input&amp;gt; --collect-only -q&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In &lt;code&gt;./hive&lt;/code&gt; &lt;a href=&#34;./hive/main.md&#34;&gt;standalone mode&lt;/a&gt;, this can be achieved via EEST&amp;rsquo;s &lt;a href=&#34;./hive/common_options.md#collect-onlydry-run&#34;&gt;&lt;code&gt;--sim.limit&lt;/code&gt; &amp;ldquo;collectonly&amp;rdquo; prefix&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/main/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/main/</guid>
      <description>&lt;h1 id=&#34;adding-a-new-test&#34;&gt;Adding a New Test&lt;/h1&gt;&#xA;&lt;p&gt;All test cases are located underneath the &lt;code&gt;tests&lt;/code&gt; directory, which are then organized by fork. Each fork contains sub-directories containing test sub-categories.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;📁 execution-test-specs/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├─╴📁 tests/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;|   ├── 📄 __init__.py&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   ├── 📁 cancun/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;|   |    ├── 📄 __init__.py&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   |    └── 📁 eip4844_blobs/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;|   |        ├── 📄 __init__.py&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;|   |        ├── 📄 test_blobhash_opcode.py&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;|   |        ├── 📄 test_excess_blob_gas.py&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;|   |        └── 📄 ...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;|   ├── 📁 shanghai&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;|   |    ├── 📁 eip3651_warm_coinbase&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;|   |    |   ├── 📄 __init__.py&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;|   |    |   └── 📄 test_warm_coinbase.py&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;|   |    ├── 📁 eip3855_push0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;|   |    |   ├── 📄 __init__.py&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;|   |    |   └── 📄 test_push0.py&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;|   |    ├── 📁...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;|   |    ...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   └── 📁 ...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Each category/sub-directory may have multiple Python test modules (&lt;code&gt;*.py&lt;/code&gt;) which in turn may contain many test functions. The test functions themselves are always parametrized by fork (by the framework).&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/main/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/main/</guid>
      <description>&lt;!-- markdownlint-disable MD001 (MD001=heading-increment) --&gt;&#xA;&lt;h1 id=&#34;eip-execution-layer-testing-checklist-template&#34;&gt;EIP Execution Layer Testing Checklist Template&lt;/h1&gt;&#xA;&lt;p&gt;Depending on the changes introduced by an EIP, the following template is the minimum baseline to guarantee test coverage of the Execution Layer features.&lt;/p&gt;&#xA;&lt;h2 id=&#34;checklist-progress-tracker&#34;&gt;Checklist Progress Tracker&lt;/h2&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Total Checklist Items&lt;/th&gt;&#xA;          &lt;th&gt;Covered Checklist Items&lt;/th&gt;&#xA;          &lt;th&gt;Percentage&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;TOTAL_CHECKLIST_ITEMS&lt;/td&gt;&#xA;          &lt;td&gt;COVERED_CHECKLIST_ITEMS&lt;/td&gt;&#xA;          &lt;td&gt;PERCENTAGE&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h2 id=&#34;general&#34;&gt;General&lt;/h2&gt;&#xA;&lt;h4 id=&#34;code-coverage&#34;&gt;Code coverage&lt;/h4&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;ID&lt;/th&gt;&#xA;          &lt;th&gt;Description&lt;/th&gt;&#xA;          &lt;th&gt;Status&lt;/th&gt;&#xA;          &lt;th&gt;Tests&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;general/code_coverage/eels&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Run produced tests against &lt;a href=&#34;https://github.com/ethereum/execution-specs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;EELS&lt;/a&gt; and verify that line code coverage of new added lines for the EIP is 100%, with only exceptions being unreachable code lines.&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;general/code_coverage/test_coverage&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Run coverage on the test code itself (as a basic logic sanity check), i.e., &lt;code&gt;uv run fill --cov tests&lt;/code&gt;.&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;general/code_coverage/second_client&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Optional - Run against a second client and verify sufficient code coverage over new code added for the EIP.&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h4 id=&#34;fuzzing&#34;&gt;Fuzzing&lt;/h4&gt;&#xA;&lt;p&gt;Fuzzing is recommended to be performed on EIPs that introduce new cryptography primitives.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/main/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/main/</guid>
      <description>&lt;h1 id=&#34;eip-checklist-generation&#34;&gt;EIP Checklist Generation&lt;/h1&gt;&#xA;&lt;p&gt;The EIP checklist feature helps track test coverage for EIP implementations by automatically generating filled checklists based on test markers.&lt;/p&gt;&#xA;&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;&#xA;&lt;p&gt;When implementing tests for an EIP, you can mark specific tests as covering checklist items from the &lt;a href=&#34;../writing_tests/checklist_templates/eip_testing_checklist_template.md&#34;&gt;EIP testing checklist template&lt;/a&gt;. The framework will then generate a filled checklist showing which items have been implemented.&lt;/p&gt;&#xA;&lt;h2 id=&#34;marking-tests-as-implementing-eip-checklist-items&#34;&gt;Marking Tests as implementing EIP Checklist Items&lt;/h2&gt;&#xA;&lt;p&gt;To mark a test as implementing a specific checklist item, use the structured &lt;code&gt;EIPChecklist&lt;/code&gt; class:&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/main/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/main/</guid>
      <description>&lt;h1 id=&#34;exception-tests&#34;&gt;Exception Tests&lt;/h1&gt;&#xA;&lt;p&gt;Exception tests are a special type of test which verify that an invalid transaction or an invalid block are correctly rejected with the expected error.&lt;/p&gt;&#xA;&lt;h2 id=&#34;creating-an-exception-test&#34;&gt;Creating an Exception Test&lt;/h2&gt;&#xA;&lt;p&gt;To test for an exception, the test can use either of the following types from &lt;code&gt;ethereum_test_exceptions&lt;/code&gt; library:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;../library/ethereum_test_exceptions.md#ethereum_test_exceptions.TransactionException&#34;&gt;&lt;code&gt;TransactionException&lt;/code&gt;&lt;/a&gt;: To be added to the &lt;code&gt;error&lt;/code&gt; field of the &lt;code&gt;Transaction&lt;/code&gt; object, and to the &lt;code&gt;exception&lt;/code&gt; field of the &lt;code&gt;Block&lt;/code&gt; object that includes the transaction; this exception type is used when a transaction is invalid, and therefore when included in a block, the block is expected to be invalid too. This is different from valid transactions where an exception during EVM execution is expected (e.g. a revert, or out-of-gas), which can be included in valid blocks.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/main/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/main/</guid>
      <description>&lt;h1 id=&#34;using-and-extending-fork-methods&#34;&gt;Using and Extending Fork Methods&lt;/h1&gt;&#xA;&lt;p&gt;This document describes the Fork class in the Ethereum execution spec tests framework, which provides a standardized way to define properties of Ethereum forks. Understanding how to use and extend these fork methods is essential for writing flexible tests that can automatically adapt to different forks.&lt;/p&gt;&#xA;&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;&#xA;&lt;p&gt;The &lt;code&gt;BaseFork&lt;/code&gt; class is an abstract base class that defines the interface for all Ethereum forks. Each implemented fork (like Frontier, Homestead, etc.) extends this class and implements its abstract methods to provide fork-specific behavior.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/main/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/main/</guid>
      <description>&lt;h1 id=&#34;a-guide-to-porting-original-ethereum-tests-to-eest&#34;&gt;A Guide to Porting Original Ethereum Tests to EEST&lt;/h1&gt;&#xA;&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;&#xA;&lt;p&gt;EEST is the successor to &lt;a href=&#34;https://github.com/ethereum/tests&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ethereum/tests&lt;/a&gt; (aka &amp;ldquo;original tests&amp;rdquo;), a repository that defined EVM test cases from the &lt;a href=&#34;https://ethereum.org/en/history/#frontier&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Frontier&lt;/a&gt; phase up to and including &lt;a href=&#34;https://ethereum.org/en/history/#paris&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The Merge&lt;/a&gt;. These test cases are specified as YAML (and occasionally JSON) files in the &lt;a href=&#34;https://github.com/ethereum/tests/tree/develop/src&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;./src/&lt;/code&gt;&lt;/a&gt; sub-directory. JSON test fixtures, which are fully-populated tests that can be executed against clients, are generated using &lt;a href=&#34;https://github.com/ethereum/retesteth&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ethereum/retesteth&lt;/a&gt;. These JSON artifacts are regenerated when needed and added to the repository, typically in the &lt;a href=&#34;https://github.com/ethereum/execution-spec-tests/tree/main/tests/static/state_tests&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;tests/static/state_tests&lt;/code&gt;&lt;/a&gt; sub-directory.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/main/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/main/</guid>
      <description>&lt;h1 id=&#34;post-mortems-of-missed-test-scenarios&#34;&gt;Post-Mortems of Missed Test Scenarios&lt;/h1&gt;&#xA;&lt;p&gt;This page contains a collection of post-mortem analyses for test cases that were not initially identified by the testing process.&lt;/p&gt;&#xA;&lt;p&gt;The objective is to document and learn from missed scenarios — including those that were caught on the client side due to consensus issue, client developer raised issues, external reviewers, or external bug bounties — in order to improve test coverage and reduce the likelihood of similar omissions in the future.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/main/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/main/</guid>
      <description>&lt;h1 id=&#34;referencing-an-eip-spec-version&#34;&gt;Referencing an EIP Spec Version&lt;/h1&gt;&#xA;&lt;p&gt;Tests that implement features from an Ethereum Improvement Proposal (&lt;a href=&#34;https://github.com/ethereum/EIPs/tree/master/EIPS&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ethereum/EIPs&lt;/a&gt;) must define the EIP&amp;rsquo;s markdown SHA digest within the test&amp;rsquo;s Python module. This ensures our tests stay up-to-date with any changes to the EIP specifications.&lt;/p&gt;&#xA;&lt;p&gt;The &lt;code&gt;check_eip_versions&lt;/code&gt; command-line utility automatically verifies that all EIP references in the codebase are current. It works by comparing the SHA specified in the test against the latest version in the ethereum/EIPs repository. This utility uses pytest to generate test cases for every module that includes &amp;ldquo;eip&amp;rdquo; in its path.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/main/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/main/</guid>
      <description>&lt;h1 id=&#34;test-markers&#34;&gt;Test Markers&lt;/h1&gt;&#xA;&lt;p&gt;Test markers are used to categorize tests and to run specific subsets of tests. They are defined in the test files using the &lt;code&gt;pytest.mark&lt;/code&gt; decorator.&lt;/p&gt;&#xA;&lt;p&gt;The examples below use &lt;code&gt;StateTestFiller&lt;/code&gt; tests, but the same markers can also be applied to &lt;code&gt;BlockchainTestFiller&lt;/code&gt; tests.&lt;/p&gt;&#xA;&lt;h2 id=&#34;fork-markers&#34;&gt;Fork Markers&lt;/h2&gt;&#xA;&lt;p&gt;These markers are used to specify the forks for which a test is valid.&lt;/p&gt;&#xA;&lt;h3 id=&#34;pytestmarkvalid_fromfork_name&#34;&gt;&lt;code&gt;@pytest.mark.valid_from(&amp;quot;FORK_NAME&amp;quot;)&lt;/code&gt;&lt;/h3&gt;&#xA;&lt;p&gt;:::pytest_plugins.forks.forks.ValidFrom&lt;/p&gt;&#xA;&lt;h3 id=&#34;pytestmarkvalid_untilfork_name&#34;&gt;&lt;code&gt;@pytest.mark.valid_until(&amp;quot;FORK_NAME&amp;quot;)&lt;/code&gt;&lt;/h3&gt;&#xA;&lt;p&gt;:::pytest_plugins.forks.forks.ValidUntil&lt;/p&gt;&#xA;&lt;h3 id=&#34;pytestmarkvalid_atfork_name_1-fork_name_2-&#34;&gt;&lt;code&gt;@pytest.mark.valid_at(&amp;quot;FORK_NAME_1&amp;quot;, &amp;quot;FORK_NAME_2&amp;quot;, ...)&lt;/code&gt;&lt;/h3&gt;&#xA;&lt;p&gt;:::pytest_plugins.forks.forks.ValidAt&lt;/p&gt;&#xA;&lt;h3 id=&#34;pytestmarkvalid_at_transition_tofork_name&#34;&gt;&lt;code&gt;@pytest.mark.valid_at_transition_to(&amp;quot;FORK_NAME&amp;quot;)&lt;/code&gt;&lt;/h3&gt;&#xA;&lt;p&gt;:::pytest_plugins.forks.forks.ValidAtTransitionTo&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/main/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/main/</guid>
      <description>&lt;h1 id=&#34;blockchain-tests&#34;&gt;Blockchain Tests&lt;/h1&gt;&#xA;&lt;p&gt;This tutorial teaches you to create a blockchain execution specification test. These tests verify that a blockchain, starting from a defined pre-state, will process given blocks and arrive at a defined post-state.&lt;/p&gt;&#xA;&lt;h2 id=&#34;pre-requisites&#34;&gt;Pre-requisites&lt;/h2&gt;&#xA;&lt;p&gt;Before proceeding with this tutorial, it is assumed that you have prior knowledge and experience with the following:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Repository set-up, see &lt;a href=&#34;../../getting_started/main.md&#34;&gt;installation&lt;/a&gt;.and run an execution specification test as outlined in the .&lt;/li&gt;&#xA;&lt;li&gt;Able to run &lt;code&gt;fill&lt;/code&gt;, see &lt;a href=&#34;../../filling_tests/getting_started.md&#34;&gt;Getting Started: Filling Tests&lt;/a&gt;.&lt;/li&gt;&#xA;&lt;li&gt;Understand how to read a &lt;a href=&#34;https://ethereum-tests.readthedocs.io/en/latest/test_filler/blockchain_filler.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;blockchain test&lt;/a&gt;.&lt;/li&gt;&#xA;&lt;li&gt;Familiarity with &lt;a href=&#34;https://docs.python.org/3/tutorial/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Python&lt;/a&gt;.&lt;/li&gt;&#xA;&lt;li&gt;Understand how to write an execution spec &lt;a href=&#34;./state_transition.md&#34;&gt;state transition test&lt;/a&gt;.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;example-tests&#34;&gt;Example Tests&lt;/h2&gt;&#xA;&lt;p&gt;In this tutorial we will go over [test_block_number] in &lt;code&gt;test_block_example.py&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/main/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/main/</guid>
      <description>&lt;h1 id=&#34;state-transition-tests&#34;&gt;State Transition Tests&lt;/h1&gt;&#xA;&lt;p&gt;This tutorial teaches you to create a state transition execution specification test using the Python Opcodes minilang for writing EVM bytecode. These tests verify that a starting pre-state will reach a specified post-state after executing a single transaction. In this example, we&amp;rsquo;ll create a simple contract using bytecode and then interact with it through a transaction to verify the expected state changes.&lt;/p&gt;&#xA;&lt;p&gt;For an overview of different test types available, see &lt;a href=&#34;../../writing_tests/types_of_tests.md&#34;&gt;Types of Tests&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/main/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/main/</guid>
      <description>&lt;h1 id=&#34;types-of-tests&#34;&gt;Types of tests&lt;/h1&gt;&#xA;&lt;p&gt;There are currently three types of tests that can be produced by a test spec:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;State Tests&lt;/li&gt;&#xA;&lt;li&gt;Blockchain Tests&lt;/li&gt;&#xA;&lt;li&gt;Transaction Tests&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;state-tests&#34;&gt;State Tests&lt;/h2&gt;&#xA;&lt;h3 id=&#34;purpose&#34;&gt;Purpose&lt;/h3&gt;&#xA;&lt;p&gt;Tests the effects of individual transactions (ideally a single one) that span a single block in a controlled environment.&lt;/p&gt;&#xA;&lt;h3 id=&#34;use-cases&#34;&gt;Use cases&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Test a single opcode behavior.&lt;/li&gt;&#xA;&lt;li&gt;Verify opcode gas costs.&lt;/li&gt;&#xA;&lt;li&gt;Test interactions between multiple smart contracts.&lt;/li&gt;&#xA;&lt;li&gt;Test creation of smart contracts.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;callout callout-info&#34;&gt;&#xA;  &lt;div class=&#34;callout-title&#34;&gt;Note&lt;/div&gt;&#xA;  &lt;div class=&#34;callout-content&#34;&gt;&#xA;    The fill function will automatically generate a &lt;code&gt;blockchain_test&lt;/code&gt; fixture from &lt;code&gt;state_tests&lt;/code&gt;, consisting of one block and one transaction.&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;h2 id=&#34;blockchain-tests&#34;&gt;Blockchain Tests&lt;/h2&gt;&#xA;&lt;h3 id=&#34;purpose-1&#34;&gt;Purpose&lt;/h3&gt;&#xA;&lt;p&gt;Blockchain tests span multiple blocks which may or may not contain transactions and mainly focus on the block to block effects to the Ethereum state.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/main/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/main/</guid>
      <description>&lt;h1 id=&#34;verifying-changes&#34;&gt;Verifying Changes&lt;/h1&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;callout callout-warning&#34;&gt;&#xA;  &lt;div class=&#34;callout-title&#34;&gt;Documentation Moved&lt;/div&gt;&#xA;  &lt;div class=&#34;callout-content&#34;&gt;&#xA;    This documentation has been relocated to &lt;a href=&#34;../getting_started/code_standards_details.md&#34;&gt;Detailed Code Standards&lt;/a&gt;. Please use the new location for the most up-to-date information.&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/main/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/main/</guid>
      <description>&lt;h1 id=&#34;writing-a-new-test&#34;&gt;Writing a New Test&lt;/h1&gt;&#xA;&lt;h2 id=&#34;test-functions&#34;&gt;Test Functions&lt;/h2&gt;&#xA;&lt;p&gt;Every test case is defined as a Python function that implements a single &lt;code&gt;StateTest&lt;/code&gt; or &lt;code&gt;BlockchainTest&lt;/code&gt; using the &lt;code&gt;state_test&lt;/code&gt; or &lt;code&gt;blockchain_test&lt;/code&gt; objects made available by the framework (&lt;a href=&#34;./types_of_tests.md#deciding-on-a-test-type&#34;&gt;learn how to decide on a test type&lt;/a&gt;). Test cases, and the respective test modules, must fulfill the following requirements:&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Requirement&lt;/th&gt;&#xA;          &lt;th&gt;When&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Be &lt;a href=&#34;#specifying-which-forks-tests-are-valid-for&#34;&gt;decorated with validity markers&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;If the test case is not valid for all forks&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Use one of &lt;code&gt;state_test&lt;/code&gt; or &lt;code&gt;blockchain_test&lt;/code&gt; &lt;a href=&#34;#the-state_test-and-blockchain_test-test-function-arguments&#34;&gt;in its function arguments&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td&gt;Always&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Call the &lt;code&gt;state_test&lt;/code&gt; or &lt;code&gt;blockchain_test&lt;/code&gt; in its test body&lt;/td&gt;&#xA;          &lt;td&gt;Always&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Add a &lt;a href=&#34;./reference_specification.md&#34;&gt;reference version of the EIP spec&lt;/a&gt; under test&lt;/td&gt;&#xA;          &lt;td&gt;Test path contains &lt;code&gt;eip&lt;/code&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h3 id=&#34;specifying-which-forks-tests-are-valid-for&#34;&gt;Specifying which Forks Tests are Valid For&lt;/h3&gt;&#xA;&lt;p&gt;Test cases can (and it most cases should) be decorated with one or more &amp;ldquo;validity markers&amp;rdquo; that define which the forks the test is valid for. This is achieved by applying:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
