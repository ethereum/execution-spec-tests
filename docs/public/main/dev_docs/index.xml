<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Developer Documentation on EEST Docs</title>
    <link>http://localhost:1313/main/dev_docs/</link>
    <description>Recent content in Developer Documentation on EEST Docs</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 01 Jan 0001 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/main/dev_docs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>http://localhost:1313/main/dev_docs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/main/dev_docs/</guid>
      <description>&lt;h1 id=&#34;coding-style&#34;&gt;Coding Style&lt;/h1&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;callout callout-warning&#34;&gt;&#xA;  &lt;div class=&#34;callout-title&#34;&gt;Documentation Moved&lt;/div&gt;&#xA;  &lt;div class=&#34;callout-content&#34;&gt;&#xA;    This documentation has been relocated to &lt;a href=&#34;../getting_started/code_standards.md&#34;&gt;Getting Started -&amp;gt; Code Standards&lt;/a&gt;. Please use the new location for the most up-to-date information.&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/main/dev_docs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/main/dev_docs/</guid>
      <description>&lt;h1 id=&#34;managing-configurations&#34;&gt;Managing Configurations&lt;/h1&gt;&#xA;&lt;p&gt;Configurations are managed by the &lt;code&gt;config&lt;/code&gt; package. It provides both environment and application configurations.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;‚îú‚îÄ‚îÄ src&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;‚îÇ   ‚îî‚îÄ‚îÄ üìÅ config  [Application wide environment and configurations]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;‚îÇ       ‚îú‚îÄ‚îÄ üìÑ __init__.py&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;‚îÇ       ‚îú‚îÄ‚îÄ üìÑ app.py [Configurations for application framework]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;‚îÇ       ‚îú‚îÄ‚îÄ üìÑ docs.py [Configurations for documentation]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;‚îÇ       ‚îî‚îÄ‚îÄ üìÑ env.py  [Exposes `env.yaml` to the application]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;‚îî‚îÄ‚îÄ üìÑ env.yaml [Environment file (git ignored)]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;environment-configurations&#34;&gt;Environment Configurations&lt;/h2&gt;&#xA;&lt;p&gt;Application-wide &lt;a href=&#34;https://www.12factor.net/config&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;environment configuration&lt;/a&gt;, which varies across staging, production, and development environments are read from &lt;code&gt;env.yaml&lt;/code&gt; in the project root.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/main/dev_docs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/main/dev_docs/</guid>
      <description>&lt;h1 id=&#34;eest-dependency-management-and-packaging&#34;&gt;EEST Dependency Management and Packaging&lt;/h1&gt;&#xA;&lt;p&gt;EEST uses &lt;a href=&#34;https://docs.astral.sh/uv/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;uv&lt;/code&gt;&lt;/a&gt; to manage and pin its dependencies.&lt;/p&gt;&#xA;&lt;p&gt;Please use &lt;code&gt;uv&amp;gt;=0.7.0&lt;/code&gt; to ensure &lt;code&gt;uv&lt;/code&gt; writes &lt;code&gt;uv.lock&lt;/code&gt; files with consistent fields and formatting (see [ethereum/execution-spec-tests#1597]https://github.com/ethereum/execution-spec-tests/pull/1597).&lt;/p&gt;&#xA;&lt;h2 id=&#34;managing-dependencies&#34;&gt;Managing Dependencies&lt;/h2&gt;&#xA;&lt;p&gt;We aim to provide specific &lt;a href=&#34;https://peps.python.org/pep-0440/#version-specifiers&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;version specifiers&lt;/a&gt; for each of our direct and extra dependencies.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;callout callout-info&#34;&gt;&#xA;  &lt;div class=&#34;callout-title&#34;&gt;Packages should be managed via &lt;code&gt;uv&lt;/code&gt;&lt;/div&gt;&#xA;  &lt;div class=&#34;callout-content&#34;&gt;&#xA;    &lt;p&gt;Dependencies should be managed using &lt;code&gt;uv&lt;/code&gt; on the command-line to ensure that version compatibility is ensured across all dependencies and that &lt;code&gt;uv.lock&lt;/code&gt; is updated as required.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/main/dev_docs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/main/dev_docs/</guid>
      <description>&lt;h1 id=&#34;documentation&#34;&gt;Documentation&lt;/h1&gt;&#xA;&lt;p&gt;The &lt;code&gt;execution-spec-tests&lt;/code&gt; documentation is generated via &lt;a href=&#34;https://github.com/gohugoio/hugo&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;hugo&lt;/code&gt;&lt;/a&gt; and hosted remotely on Github Pages at &lt;a href=&#34;https://eest.ethereum.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;eest.ethereum.org&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;&#xA;&lt;p&gt;Grab the latest &lt;code&gt;hugo&lt;/code&gt; binary from the official release page or build it yourself. Then make the binary executable and add it to the PATH (or to a directory that has already been added to the PATH like e.g. &lt;code&gt;/usr/local/bin/&lt;/code&gt;). We do not require any additional plugins or dependencies.&lt;/p&gt;&#xA;&lt;h2 id=&#34;build-and-locally-host-the-documentation&#34;&gt;Build and Locally Host the Documentation&lt;/h2&gt;&#xA;&lt;p&gt;Build the docs:&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/main/dev_docs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/main/dev_docs/</guid>
      <description>&lt;h1 id=&#34;documenting-clis&#34;&gt;Documenting CLIs&lt;/h1&gt;&#xA;&lt;p&gt;EEST command line interfaces (CLIs) are documented using the &lt;a href=&#34;https://click.palletsprojects.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;click&lt;/code&gt;&lt;/a&gt; library&amp;rsquo;s built-in help system and the &lt;a href=&#34;https://github.com/mkdocs/mkdocs-click&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;mkdocs-click&lt;/code&gt;&lt;/a&gt; extension for mkdocs. This allows generation of CLI documentation directly from the (click) source code, ensuring that the documentation is always up-to-date with the code.&lt;/p&gt;&#xA;&lt;p&gt;Current limitations:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;code&gt;mkdocs serve&lt;/code&gt; does not automatically update the CLI documentation when the source code changes. You must restart the server to see the changes.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;mkdocs-click&lt;/code&gt; does not automatically generate a short help string from sub-command docstrings. You must provide a short help string for each sub-command in the source code with &lt;code&gt;@click.command(short_help=&amp;quot;...&amp;quot;)&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/ethereum/execution-spec-tests/blob/main/docs/library/cli/evm_bytes.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;markdown&lt;/a&gt; and corresponding &lt;a href=&#34;https://github.com/ethereum/execution-spec-tests/blob/main/src/cli/evm_bytes.py&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Python docstrings&lt;/a&gt; for the &lt;a href=&#34;../library/cli/evm_bytes.md&#34;&gt;&lt;code&gt;evm_bytes&lt;/code&gt; CLI documentation&lt;/a&gt; as an example of how to document a CLI using &lt;code&gt;mkdocs-click&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/main/dev_docs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/main/dev_docs/</guid>
      <description>&lt;h1 id=&#34;working-with-eest-libraries-interactively&#34;&gt;Working with EEST Libraries Interactively&lt;/h1&gt;&#xA;&lt;p&gt;You can work with EEST Python packages interactively with &lt;code&gt;ipython&lt;/code&gt; using:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uvx  --with-editable . ipython&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This command will create a virtual environment, install EEST&amp;rsquo;s packages in &amp;ldquo;&lt;a href=&#34;https://setuptools.pypa.io/en/latest/userguide/development_mode.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;editable mode&lt;/a&gt;&amp;rdquo; (source changes get reflected in the interactive shell), and start an &lt;code&gt;ipython&lt;/code&gt; shell. You can then import any of the packages and experiment with them interactively.&lt;/p&gt;&#xA;&#xA;&#xA;&lt;div class=&#34;callout callout-info&#34;&gt;&#xA;  &lt;div class=&#34;callout-title&#34;&gt;Example: Working with &lt;code&gt;ethereum_test_forks&lt;/code&gt;&lt;/div&gt;&#xA;  &lt;div class=&#34;callout-content&#34;&gt;&#xA;    &lt;p&gt;See which defined forks are &amp;ldquo;ignored&amp;rdquo; by default:&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/main/dev_docs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/main/dev_docs/</guid>
      <description>&lt;h1 id=&#34;logging&#34;&gt;Logging&lt;/h1&gt;&#xA;&lt;p&gt;This document describes the logging system used in the Ethereum Execution Spec Tests project. Currently, logging is only supported for &lt;code&gt;consume&lt;/code&gt; commands.&lt;/p&gt;&#xA;&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;&#xA;&lt;p&gt;The project uses Python&amp;rsquo;s standard logging module with custom extensions to provide enhanced logging capabilities. Our logging system is implemented in the &lt;code&gt;src/pytest_plugins/logging.py&lt;/code&gt; module and provides the following features:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Custom log levels between the standard Python log levels&lt;/li&gt;&#xA;&lt;li&gt;Timestamps with millisecond precision in UTC&lt;/li&gt;&#xA;&lt;li&gt;Color-coded log output (when not running in Docker)&lt;/li&gt;&#xA;&lt;li&gt;File logging with a consistent naming pattern&lt;/li&gt;&#xA;&lt;li&gt;Integration with pytest&amp;rsquo;s output capture&lt;/li&gt;&#xA;&lt;li&gt;Support for distributed test execution with pytest-xdist&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;custom-log-levels&#34;&gt;Custom Log Levels&lt;/h2&gt;&#xA;&lt;p&gt;In addition to the standard Python log levels (DEBUG, INFO, WARNING, ERROR, CRITICAL), we&amp;rsquo;ve added the following custom levels:&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/main/dev_docs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/main/dev_docs/</guid>
      <description>&lt;h1 id=&#34;enabling-pre-commit-checks&#34;&gt;Enabling Pre-Commit Checks&lt;/h1&gt;&#xA;&lt;p&gt;There&amp;rsquo;s a &lt;a href=&#34;https://pre-commit.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;pre-commit&lt;/a&gt; config file available in the repository root (&lt;code&gt;.pre-commit-config.yaml&lt;/code&gt;) that can be used to enable automatic checks upon commit - the commit will not go through if the checks don&amp;rsquo;t pass.&lt;/p&gt;&#xA;&lt;p&gt;To enable pre-commit, the following must be run once:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;uvx pre-commit install&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;&#xA;&lt;div class=&#34;callout callout-info&#34;&gt;&#xA;  &lt;div class=&#34;callout-title&#34;&gt;Bypassing pre-commit checks&lt;/div&gt;&#xA;  &lt;div class=&#34;callout-content&#34;&gt;&#xA;    &lt;p&gt;Enabling of pre-commit checks is not mandatory (it cannot be enforced) and even if it is enabled, it can always be bypassed with:&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/main/dev_docs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/main/dev_docs/</guid>
      <description>&lt;h1 id=&#34;running-github-actions-locally&#34;&gt;Running Github Actions Locally&lt;/h1&gt;&#xA;&lt;p&gt;The Github Actions workflows can be tested locally using &lt;a href=&#34;https://github.com/nektos/act&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;nektos/act&lt;/a&gt; without pushing changes to the remote. The local repository state will be used in the executed workflow.&lt;/p&gt;&#xA;&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;A docker installation without &lt;code&gt;sudo&lt;/code&gt; prefix requirement (&lt;a href=&#34;https://docs.docker.com/engine/install/linux-postinstall/#manage-docker-as-a-non-root-user&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;see also dockerdocs&lt;/a&gt;):&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo usermod -aG docker $USER&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Install the Github CLI (&lt;code&gt;gh&lt;/code&gt;): &lt;a href=&#34;https://github.com/cli/cli/blob/trunk/docs/install_linux.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;linux&lt;/a&gt;, &lt;a href=&#34;https://github.com/cli/cli/tree/trunk?tab=readme-ov-file#macos&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;macos&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Authenticate your Github account with the Github CLI:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gh auth login&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is required to set &lt;code&gt;GITHUB_TOKEN&lt;/code&gt; to the output of &lt;code&gt;gh auth token&lt;/code&gt; when running the workflows.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
